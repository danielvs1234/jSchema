/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.jSchema.Model
import org.xtext.example.mydsl.jSchema.PrimitiveObject
import org.xtext.example.mydsl.jSchema.MainObject
import org.xtext.example.mydsl.jSchema.Property
import javax.inject.Inject
import org.eclipse.xtext.naming.IQualifiedNameProvider
import java.util.ArrayList
import org.eclipse.emf.common.util.EList
import org.xtext.example.mydsl.jSchema.hasProperties

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class JSchemaGenerator extends AbstractGenerator {
	
	  @Inject extension IQualifiedNameProvider

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
			val abstractObjects = resource.allContents.filter(Model).next
			val primitiveObjects = resource.allContents.filter(PrimitiveObject)
			
			for (obj : resource.allContents.toIterable.filter(MainObject)){
				compileObject(obj)
			}
	}
			
	def compileObject(MainObject obj){
		var bool = "false"
		if(checkIfObjectContainsOtherObjects(obj) == true){
			bool = "true"
		}
		System.out.println("Contains other objects: " + bool + "  " +
			 obj.objectName.toString())
			 
		
	}
	
	def compilePrimitiveObject(PrimitiveObject obj){
	}
	
	def checkIfObjectContainsOtherObjects(MainObject obj){
		if(obj.includeObjects != null){
			return true
		}else{
			return false
		}
		
	}
	
	def ArrayList<hasProperties> getProperties(MainObject obj){
		val ArrayList<hasProperties> propertyList = new ArrayList<hasProperties>();
		for(hasProperties e : obj.properties){
			propertyList.add(e);
		}
		return propertyList
	}
	
	
	def stringBuilder(String string){
		
	}
	
	
			
	
}
