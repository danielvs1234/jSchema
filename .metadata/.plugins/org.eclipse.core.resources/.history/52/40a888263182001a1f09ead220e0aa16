/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.jSchema.Model
import org.xtext.example.mydsl.jSchema.PrimitiveObject
import org.xtext.example.mydsl.jSchema.MainObject
import org.xtext.example.mydsl.jSchema.Property
import javax.inject.Inject
import org.eclipse.xtext.naming.IQualifiedNameProvider
import java.util.ArrayList
import org.xtext.example.mydsl.jSchema.hasProperties
import org.xtext.example.mydsl.generator.ObjectClass

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class JSchemaGenerator extends AbstractGenerator {
	
	  @Inject extension IQualifiedNameProvider
	  ArrayList<PrimitiveObject> primitiveObjectList;
	  ArrayList<MainObject>	mainObjectList;
	  ArrayList<ObjectClass> compiledMainObjects;
	  ArrayList<PrimitiveObjectClass> compiledPrimitiveObjects;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
			primitiveObjectList = new ArrayList<PrimitiveObject>()
			mainObjectList = new ArrayList<MainObject>()
			compiledPrimitiveObjects = new ArrayList<PrimitiveObjectClass>();
			compiledMainObjects = new ArrayList<ObjectClass>();
			val abstractObjects = resource.allContents.filter(Model).next
			
			
			System.out.println("Amount of primitive objects found: " + primitiveObjectList.size())
			
			for (primObj : resource.allContents.toIterable.filter(PrimitiveObject)){
				//compile all primitive objects
				compiledPrimitiveObjects.add(compilePrimitiveObject(primObj));
			}
			
			for (obj : resource.allContents.toIterable.filter(MainObject)){
				var bool = "false"
				var rootBool = "false"
				if(checkIfObjectContainsOtherObjects(obj) == true){
					bool = "true"
				}
				if(obj.root != null){
					rootBool = "true"
				}
				System.out.println("Contains other objects: " + bool + "  " +
				obj.objectName.toString() + " PropertyListSize= " + getProperties(obj).size() + " isRoot: " + rootBool)
				//Compile all main objects
				compiledMainObjects.add(compileMainObject(obj));
				
			}
			
			for (ObjectClass compiledObject : compiledMainObjects){
			if(compiledObject.isRoot == true){
				System.out.println(compiledObject.objectJSchemaString);
				}
			}
				
			}
			
			
			
	
			
	
			
			
			
	
			
	def ObjectClass compileMainObject(MainObject obj){
		var boolean isRoot = false
		if (obj.root !== null){
			isRoot = true;
		}
		val ObjectClass tempObject = new ObjectClass(obj.objectName, isRoot, obj)
		
		if(checkIfObjectContainsOtherObjects(obj) == true){
			val ArrayList<String> includeNameList = new ArrayList<String>()
			
			if(obj.includeObjects !== null){
				for(String str : obj.includeObjects.objectID){
					includeNameList.add(str)
				}
			}
			for(String includedName : includeNameList){
				for(MainObject mainObj : mainObjectList){
					if(mainObj.objectName.toString() == includedName){
						tempObject.addMainObject(compileMainObject(mainObj));
					}
				}
				for(PrimitiveObjectClass compPrimObj : compiledPrimitiveObjects){
					if(compPrimObj.name != null){
						if(compPrimObj.name == includedName){
							tempObject.addPrimitiveObject(compPrimObj);
						}
					}
				}
			}
		
		for (hasProperties e : getProperties(obj)){
			if(e.properties.propPrim !== null){
				System.out.println("hasProperties = nested Primitive Object");
				tempObject.addHasPrimObj(compilePrimitiveObject(e.properties.propPrim));
			} else if(e.properties.propObj !== null){
				System.out.println("hasProperties = nested Main Object");
				tempObject.addHasMainObj(compileMainObject(e.properties.propObj));
			}
		}
		
		}
		
		
		
	return tempObject
		
		
	}
	
	def PrimitiveObjectClass compilePrimitiveObject(PrimitiveObject obj){
		
		var PrimitiveObjectClass temp;
		if(obj.type.string !== null){
			temp = new PrimitiveObjectClass(obj.type.string, obj, PrimitiveType.STRING, obj.type.string);
		} else if(obj.type.array !== null){
			val ArrayList<Object> arrayContent = new ArrayList<>();
			temp = new PrimitiveObjectClass(obj.type.array.arrayName, obj, PrimitiveType.ARRAY);
		} else if (obj.type.number !== null){
			temp = new PrimitiveObjectClass("number", obj, PrimitiveType.NUMBER, obj.type.number.toString());
		}
		return temp;
	}
	
	def checkIfObjectContainsOtherObjects(MainObject obj){
		if(obj.includeObjects !== null || obj.properties !== null){
			return true
		}else{
			return false
		}
		
	}
	
	def ArrayList<hasProperties> getProperties(MainObject obj){
		val ArrayList<hasProperties> propertyList = new ArrayList<hasProperties>();
		for(hasProperties e : obj.properties){
			propertyList.add(e);
		}
		return propertyList
	}
	
	
	def stringBuilder(String string){
		
	}
	
	
			
	
}
