/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.mydsl.jSchema.Model
import org.quicktheories.WithQuickTheories
import java.security.SecureRandom
import static org.junit.Assert.assertTrue
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.InMemoryFileSystemAccess
import com.google.gson.JsonParser
import com.google.gson.JsonParseException
import org.eclipse.xtext.generator.IGenerator2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.util.CancelIndicator

@ExtendWith(InjectionExtension)
@InjectWith(JSchemaInjectorProvider)
class JSchemaParsingTest implements WithQuickTheories {
	@Inject
	ParseHelper<Model> parseHelper
	@Inject
	IGenerator2 underTest

	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			Hello Xtext!
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}


	@Test
	def void checkStringThings() {
		qt().forAll(
			strings().betweenCodePoints(0x0023, 0x0026).ofLengthBetween(0, 1500),
			strings().betweenCodePoints(0x0028, 0x005B).ofLengthBetween(0, 1500),
			strings().betweenCodePoints(0x005D, 0x007A).ofLengthBetween(0, 1500)
			)
			//.checkAssert(a,b,c | Assertions.assertTrue((parseHelper.parse('''String "«a+b+c»"''')).eResource.errors.isEmpty))
			.checkAsser(a,b,c | Assertions.assertTrue((checkValidation(parseHelper.parse('''String "«a+b+c»"'''))))
			}
	
	
	@Test
	def void checkNumbers() {
		qt.forAll(
			integers().allPositive
		)
		.checkAssert(Integer i | Assertions.assertTrue((parseHelper.parse('''num «i»''')).eResource.errors.isEmpty))
	}
	
	@Test
	def void checkArrayWithStrings(){
		qt.forAll(
			strings().betweenCodePoints(0x0023, 0x0026).ofLengthBetween(0, 1500),
			strings().betweenCodePoints(0x0028, 0x005B).ofLengthBetween(0, 1500),
			strings().betweenCodePoints(0x005D, 0x007A).ofLengthBetween(0, 1500)
			)
		
		.checkAssert(a,b,c | Assertions.assertTrue((parseHelper.parse('''TestArrayName [String "«a+b+c»"]''')).eResource.errors.isEmpty))
	}
	
	@Test
	def void checkArrayWithNumbers(){
		qt.forAll(
			integers.allPositive
			)
			.checkAssert(i | Assertions.assertTrue((parseHelper.parse('''TestArrayName [num «i»]''')).eResource.errors.isEmpty))
	}
	
	@Test
	def void checkArrayWithStringAndNumber(){
		qt.forAll(
			integers.allPositive,
			strings().betweenCodePoints(0x0023, 0x0026).ofLengthBetween(0, 1500),
			strings().betweenCodePoints(0x0028, 0x005B).ofLengthBetween(0, 1500),
			strings().betweenCodePoints(0x005D, 0x007A).ofLengthBetween(0, 1500)
		)
		.checkAssert(i,a,b,c | Assertions.assertTrue((parseHelper.parse('''TestArrayName [String "«a+b+c»", num «i»]''')).eResource.errors.isEmpty))
	}
	
	@Test
	def void NEWTEST(){
		Assertions.assertTrue(true)
	}
	
	@Test
	def void checkArrayWithName(){
		qt.forAll(
			strings().basicLatinAlphabet().ofLengthBetween(1,1500)
		)
		.checkAssert(a | Assertions.assertTrue((parseHelper.parse('''«a»[]''')).eResource.errors.isEmpty))
		
		Assertions.assertTrue(true)
	}



	def boolean checkValidation(Model model) {

		val fsa = new InMemoryFileSystemAccess()
		if (getParsing !== null && !getParsing.eResource.errors.isEmpty) {
			assertTrue("Errors in syntax", false)
		}
		underTest.doGenerate(model.eResource, fsa, null)
		val producedString = fsa.textFiles.get(IFileSystemAccess::DEFAULT_OUTPUT + "testFile.json")
		
		return checkIfValid(producedString.toString)
	}
	
	
	
	def Model getParsing(){     
		return parseHelper.parse('''       testobjectProp {
		             String "testProp"
		        }
		
		        String "testStringProp" with 
		            length 3-5, 
		            pattern "/&", 
		            format uri;
		
		        TestArray2 [String "name1", num 4]
		
		        mainTestProp root{
		            Test includes "testStringProp", "testobjectProp", "TestArray2"{
		                TestArray [String "a", num 1]
		            }
		        }''')
	}
	
	
	def boolean checkIfValid(String jsonString){
		val JsonParser parser = new JsonParser()
		try{
			parser.parse(jsonString)
			return true
		} catch(JsonParseException e){
			System.out.println("JSON file is not valid")
			return false
		}
		
		
	}
	
	
	
}
