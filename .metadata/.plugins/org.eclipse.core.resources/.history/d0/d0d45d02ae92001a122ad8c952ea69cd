/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.mydsl.jSchema.Model
import org.quicktheories.WithQuickTheories

@ExtendWith(InjectionExtension)
@InjectWith(JSchemaInjectorProvider)
class JSchemaParsingTest implements WithQuickTheories {
	@Inject
	ParseHelper<Model> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			Hello Xtext!
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void addingTwoPositiveIntegers(){
		qt().forAll(integers.allPositive, integers.allPositive).check([Integer i,  Integer j | i + j > 0]);
	}
	
	@Test
		def void generateInputTestForParsing() {
		
		val a = "mainObject root {}";
		
		try {
			parseHelper.parse(a);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
