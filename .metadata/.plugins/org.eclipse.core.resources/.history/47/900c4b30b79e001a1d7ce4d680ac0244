/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.mydsl.jSchema.Model
import org.xtext.example.mydsl.jSchema.AbstractObject
import org.quicktheories.WithQuickTheories
import java.security.SecureRandom
import static org.junit.Assert.assertTrue
import org.quicktheories.core.Gen
import org.quicktheories.api.Function4
import org.quicktheories.api.Function3
import com.google.gson.JsonParser
import com.google.gson.JsonParseException

@ExtendWith(InjectionExtension)
@InjectWith(JSchemaInjectorProvider)
class JSchemaParsingTest implements WithQuickTheories {
	@Inject
	ParseHelper<Model> parseHelper

	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			Hello Xtext!
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}

	def void addingTwoPositiveIntegers() {
		qt().forAll(integers.allPositive, integers.allPositive).check([Integer i, Integer j|i + j > 0]);
	}

	@Test
	def void checkStringThings() {
		qt().forAll(
			strings().betweenCodePoints(0x0023, 0x0026).ofLengthBetween(0, 1500),
			strings().betweenCodePoints(0x0028, 0x005B).ofLengthBetween(0, 1500),
			strings().betweenCodePoints(0x005D, 0x007A).ofLengthBetween(0, 1500)
			)
			.checkAssert(a,b,c | Assertions.assertTrue((parseHelper.parse('''String "«a+b+c»"''')).eResource.errors.isEmpty))
			}
	
	
	@Test
	def void checkNumbers() {
		qt.forAll(
			integers().allPositive
		)
		.checkAssert(Integer i | Assertions.assertTrue((parseHelper.parse('''num «i»''')).eResource.errors.isEmpty))
	}
	
	@Test
	def void checkArrayWithStrings(){
		qt.forAll(
			strings().betweenCodePoints(0x0023, 0x0026).ofLengthBetween(0, 1500),
			strings().betweenCodePoints(0x0028, 0x005B).ofLengthBetween(0, 1500),
			strings().betweenCodePoints(0x005D, 0x007A).ofLengthBetween(0, 1500)
			)
		
		.checkAssert(a,b,c | Assertions.assertTrue((parseHelper.parse('''TestArrayName [String "«a+b+c»"]''')).eResource.errors.isEmpty))
	}
	
	@Test
	def void checkArrayWithNumbers(){
		qt.forAll(
			integers.allPositive
			)
			.checkAssert(i | Assertions.assertTrue((parseHelper.parse('''TestArrayName [num «i»]''')).eResource.errors.isEmpty))
	}
	
	@Test
	def void checkArrayWithStringAndNumber(){
		qt.forAll(
			integers.allPositive,
			strings().betweenCodePoints(0x0023, 0x0026).ofLengthBetween(0, 1500),
			strings().betweenCodePoints(0x0028, 0x005B).ofLengthBetween(0, 1500),
			strings().betweenCodePoints(0x005D, 0x007A).ofLengthBetween(0, 1500)
		)
		.checkAssert(i,a,b,c | Assertions.assertTrue((parseHelper.parse('''TestArrayName [String "«a+b+c»", num «i»]''')).eResource.errors.isEmpty))
	}
	
	@Test
	def void checkArrayWithName(){
		qt.forAll(
			strings().betweenCodePoints(0x005E, 0x005E).ofLengthBetween(0,1),
			strings().betweenCodePoints(0x0041, 0x007A).ofLengthBetween(1,1),
			strings().betweenCodePoints(0x0041, 0x007A).ofLengthBetween(0,1500)
		)
		.checkAssert(a, b, c | Assertions.assertTrue((parseHelper.parse('''«a+b.replaceAll('[^a-zA-Z_0-9]',"")+c.replaceAll('[^a-zA-Z_0-9]',"")»[]''')).eResource.errors.isEmpty))
	}
	
	@Test
	def void checkObjectName(){
		qt.forAll(
			objectID
		)
		.checkAssert(a | Assertions.assertTrue((parseHelper.parse('''«a»{}''')).eResource.errors.isEmpty))
	
	}
	
	def Gen<String> azAZ09(){
		
	}
	
	def Gen<String> objectID(){
		strings().betweenCodePoints(0x005E, 0x005E).ofLengthBetween(0,1).zip(
			strings().betweenCodePoints(0x0041, 0x007A).ofLengthBetween(1,1),
			strings().betweenCodePoints(0x0030, 0x007A).ofLengthBetween(0,10),
			([string1, string2, string3 | string1.concat(string2.replaceAll('/*[^a-z^A-Z^_]',"")).concat(string3.replaceAll('/*[^a-zA-Z_0-9]',""))])
		)
	}

	def Gen<String> letters(){
		strings().betweenCodePoints(0x0041, 0x005A).ofLengthBetween(0,1500).zip(
			strings().betweenCodePoints(0x0061, 0x007A).ofLengthBetween(0,1500),
			([stringOne, stringTwo | stringOne.concat(stringTwo)])
		)
	}
	
		def boolean checkValidation(Model model) {
		val fsa = new InMemoryFileSystemAccess()
		underTest.doGenerate(model.eResource, fsa, null)
		val producedString = fsa.textFiles.get(IFileSystemAccess::DEFAULT_OUTPUT + "testFile.json")
		
		return checkIfValid(producedString.toString)
	}
	
	
	@Test
	def void shouldReturnFalse(){
		Assertions.assertTrue(checkIfValid("brlkgr+-*/234+ [}[{]"))
	}
	
	

	def boolean checkIfValid(String jsonString){
			val JsonParser parser = new JsonParser()
			try{
				parser.parse(jsonString)
				return true
			} catch(JsonParseException e){
				System.out.println("JSON file is not valid")
				return false
			}
		
	
	
	
}
