/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.scoping;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xtext.SuperCallScope;
import org.xtext.example.mydsl.jSchema.AbstractObject;
import org.xtext.example.mydsl.jSchema.Extends;
import org.xtext.example.mydsl.jSchema.Includes;
import org.xtext.example.mydsl.jSchema.JSchemaPackage;
import org.xtext.example.mydsl.jSchema.MainObject;
import org.xtext.example.mydsl.jSchema.Model;
import org.xtext.example.mydsl.jSchema.PrimitiveObject;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class JSchemaScopeProvider extends AbstractJSchemaScopeProvider {

	@Override
	public IScope getScope(EObject context, EReference reference) {
		// We want to define the Scope for the Element's superElement cross-reference
		
		if(context instanceof Extends && reference == JSchemaPackage.Literals.EXTENDS__EXTENSION_MAIN_OBJECT) {
			//Løsningen på problemet er at flytte det fra at være et temporary objekt til at være det reelle objekt der skal bruges
			Extends cont = (Extends)context;

			EObject rootElement = EcoreUtil2.getRootContainer(cont);
			List<MainObject> candidates = EcoreUtil2.getAllContentsOfType(rootElement, MainObject.class);
			
			return Scopes.scopeFor(candidates);
		}
		if(context instanceof Extends && reference == JSchemaPackage.Literals.EXTENDS__EXTENSION_PRIMITIVE_OBJECT) {
			//Løsningen på problemet er at flytte det fra at være et temporary objekt til at være det reelle objekt der skal bruges
			Extends cont = (Extends)context;

			EObject rootElement = EcoreUtil2.getRootContainer(cont);
			List<PrimitiveObject> candidates = EcoreUtil2.getAllContentsOfType(rootElement, PrimitiveObject.class);
			
			return Scopes.scopeFor(candidates);
		}
		if(context instanceof Includes && reference == JSchemaPackage.Literals.INCLUDES__INCLUDES_MAIN_OBJECT) {
			Includes cont = (Includes)context;
			EObject rootElement = EcoreUtil2.getRootContainer(cont);
			List<MainObject> candidates = EcoreUtil2.getAllContentsOfType(rootElement, MainObject.class);
			return Scopes.scopeFor(candidates);
		}
		if(context instanceof Includes && reference == JSchemaPackage.Literals.INCLUDES__INCLUDES_PRIMITIVE_OBJECT) {
			Includes cont = (Includes)context;
			EObject rootElement = EcoreUtil2.getRootContainer(cont);
			List<PrimitiveObject> candidates = EcoreUtil2.getAllContentsOfType(rootElement, PrimitiveObject.class);
			return Scopes.scopeFor(candidates);
		}
		return super.getScope(context, reference);
	}
}