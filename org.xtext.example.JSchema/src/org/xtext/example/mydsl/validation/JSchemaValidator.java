/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.validation;

import java.util.HashSet;
import java.util.Set;

import org.eclipse.emf.codegen.ecore.genmodel.GenModelPackage.Literals;
import org.eclipse.xtext.validation.Check;
import org.xtext.example.mydsl.jSchema.AbstractObject;
import org.xtext.example.mydsl.jSchema.Extends;
import org.xtext.example.mydsl.jSchema.Includes;
import org.xtext.example.mydsl.jSchema.JSchemaPackage;
import org.xtext.example.mydsl.jSchema.MainObject;
import org.xtext.example.mydsl.jSchema.PrimitiveObject;
import org.xtext.example.mydsl.jSchema.PrimitiveProperties;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class JSchemaValidator extends AbstractJSchemaValidator {
	
	@Check
    public void checkEntityNoCyclicExtends(Extends extendsObject) {
        for(MainObject mainObject : extendsObject.getExtensionMainObject()) {
            Set<MainObject> seen = new HashSet<>();
	        if(selfExtendsAbstractObjects(mainObject, seen)) {
	        	error("Cyclic extends relation", JSchemaPackage.Literals.EXTENDS__EXTENSION_MAIN_OBJECT);
	        }
        }
    }

	@Check
    public void checkEntityNoCyclicExtends(Includes includesObject) {
        for(MainObject mainObject : includesObject.getIncludesMainObject()) {
            Set<MainObject> seen = new HashSet<>();
	        if(selfExtendsAbstractObjects(mainObject, seen)) {
	        	error("Cyclic extends relation", JSchemaPackage.Literals.INCLUDES__INCLUDES_MAIN_OBJECT);
	        }
        }
    }
	
	@Check
	public void checkStringLength(PrimitiveProperties properties) {
		if(properties.getStringLength() != null) {
			if(!(Integer.parseInt(properties.getStringLength().split("-")[0]) <= Integer.parseInt(properties.getStringLength().split("-")[1]))) {
				System.out.println(Integer.parseInt(properties.getStringLength().split("-")[0]) +"  "+ Integer.parseInt(properties.getStringLength().split("-")[1]));
				error("minLength > maxLength", JSchemaPackage.Literals.PRIMITIVE_PROPERTIES__STRING_LENGTH);
			}
		}
	}
	
	public boolean selfExtendsAbstractObjects(MainObject mainobject, Set<MainObject> seen) {
		if(mainobject.getInherits() instanceof Extends) {
			for(MainObject abs : ((Extends)mainobject.getInherits()).getExtensionMainObject()) {
				if(abs != null) {
			        if(seen.contains(abs)) {
			        	return true;
			        } else {
			        	seen.add(abs);
			        	return selfExtendsAbstractObjects(abs, seen);
			    	}
				} else {
					return false;
				}
			}
			return false;
		} else if(mainobject.getInherits() instanceof Includes) {
			for(MainObject abs : ((Includes)mainobject.getInherits()).getIncludesMainObject()) {
				if(abs != null) {
			        if(seen.contains(abs)) {
			        	return true;
			        } else {
			        	seen.add(abs);
			        	return selfExtendsAbstractObjects(abs, seen);
			    	}
				} else {
					return false;
				}
			}
			return false;
		}
		return false;
	}
}
