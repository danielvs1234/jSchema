/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.validation;

import java.util.HashSet;
import java.util.Set;

import org.eclipse.emf.codegen.ecore.genmodel.GenModelPackage.Literals;
import org.eclipse.xtext.validation.Check;
import org.xtext.example.mydsl.jSchema.AbstractObject;
import org.xtext.example.mydsl.jSchema.Extends;
import org.xtext.example.mydsl.jSchema.Includes;
import org.xtext.example.mydsl.jSchema.JSchemaPackage;
import org.xtext.example.mydsl.jSchema.MainObject;
import org.xtext.example.mydsl.jSchema.PrimitiveObject;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class JSchemaValidator extends AbstractJSchemaValidator {
	
	@Check
    public void checkEntityNoCyclicExtends(MainObject mainobject) {
        Set<MainObject> seen = new HashSet<>();
        if(selfExtendsAbstractObjects(mainobject, seen)) {
        	super.error("Cyclic extends relation", JSchemaPackage.Literals.EXTENDS__EXTENSION_MAIN_OBJECT);
        }
    }
	
	public boolean selfExtendsAbstractObjects(MainObject mainobject, Set<MainObject> seen) {
		if(mainobject.getInherits() instanceof Extends) {
			for(MainObject abs : ((Extends)mainobject.getInherits()).getExtensionMainObject()) {
				if(abs != null) {
			        if(seen.contains(abs)) {
			        	return true;
			        } else {
			        	seen.add(abs);
			        	return selfExtendsAbstractObjects(abs, seen);
			    	}
				} else {
					return false;
				}
			}
			return false;
		} else if(mainobject.getInherits() instanceof Includes) {
			for(MainObject abs : ((Includes)mainobject.getInherits()).getIncludesMainObject()) {
				if(abs != null) {
			        if(seen.contains(abs)) {
			        	return true;
			        } else {
			        	seen.add(abs);
			        	return selfExtendsAbstractObjects(abs, seen);
			    	}
				} else {
					return false;
				}
			}
			return false;
		}
		return false;
    }
	
	public boolean getNameOfPrimitiveObj(AbstractObject abs, Set<AbstractObject> seen) {
		if(abs.getPrimitiveObject().getType().getName() != null) {
			boolean tmp = seen.contains(abs);
			seen.add(abs);
			return tmp;
		} else if(abs.getPrimitiveObject().getType().getArray().getName() != null) {
			boolean tmp = seen.contains(abs);
			seen.add(abs);
			return tmp;
		} else {
			return false;
		}
	}
	
//	public boolean selfExtends(MainObject e, Set<MainObject> seen) {
//        if(e==null)
//        	return false;
//        else if(seen.contains(e)) {
//        	return true;
//        } else {
//        	System.out.println(e.getName() + " was added to the set");
//        	seen.add(e);
//        	return selfExtends(e, seen);
//    	}
//    }
}
