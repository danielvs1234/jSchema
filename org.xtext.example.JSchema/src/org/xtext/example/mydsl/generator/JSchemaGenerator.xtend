/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator

import javax.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.xtext.example.mydsl.jSchema.Extends
import org.xtext.example.mydsl.jSchema.FormatTypes
import org.xtext.example.mydsl.jSchema.Includes
import org.xtext.example.mydsl.jSchema.MainObject
import org.xtext.example.mydsl.jSchema.Model
import org.xtext.example.mydsl.jSchema.PrimitiveObject

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class JSchemaGenerator extends AbstractGenerator {
	
	  @Inject extension IQualifiedNameProvider
	  
	  //Edit for writing file to custom directory

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.allContents.filter(Model).next
		constructSchema(model, fsa);
	}

	def constructSchema(Model rootModel,IFileSystemAccess2 fsa){
		var counter=0;
		fsa.generateFile("newGenFile.json", 
			'''
			{
				«««Implement scoping for includes/excludes, meaning when a mainobjects has inherits i.e includes or extends it should check for other objects. Watch video, be fast, time is of the essence»»»
				«FOR mod: rootModel.abstractObject»
					«IF mod.mainObject !== null»
						«generateMainObject(mod.mainObject)»
					«ENDIF»
					«IF mod.primitiveObject != null»
						«generatePrimitiveObject(mod.primitiveObject)»
					«ENDIF»
				«ENDFOR»
			}
			'''
		)
	}

	def generatePrimitiveStringObjectss(PrimitiveObject primitiveObject, String objName){
		return'''
		"«objName»" : 
		"type": "string"
		
		«FOR prop: primitiveObject.primitiveProperties»
			«IF prop.stringFormat !== FormatTypes.DEFAULT»
				,
				"format": "«prop.stringFormat.getName.toString»"
			«ENDIF»
			«IF prop.stringLength !== null»
				,
				"minLength": «prop.stringLength.split("-").get(0)»,
				"maxLength": «prop.stringLength.split("-").get(1)»
			«ENDIF»
			«IF prop.patternString !== null»
				,
				"pattern": "«prop.patternString»"
			«ENDIF»
		«ENDFOR»
		'''
	}
	
	def generateExtendsObjects(MainObject model){
		'''
			"allOf": [
				{
				«IF (model.inherits instanceof Extends) && !((model.inherits as Extends).extensionMainObject).empty»
					«FOR extended : (model.inherits as Extends).extensionMainObject»
						«generateMainObject(extended)»
					«ENDFOR»
					«FOR extended : (model.inherits as Extends).extensionPrimitiveObject»
						«generatePrimitiveObject(extended)»
					«ENDFOR»
				«ENDIF»
				«IF (model.inherits instanceof Includes) && !((model.inherits as Includes).includesMainObject).empty»
					«FOR included :(model.inherits as Includes).includesMainObject»
						«generateMainObject(included)»
					«ENDFOR»
					«FOR included :(model.inherits as Includes).includesPrimitiveObject»
						«generatePrimitiveObject(included)»
					«ENDFOR»
				«ENDIF»
				}
			],
		'''
	}
	
	def generatePrimitiveArrayObject(PrimitiveObject primitiveObject){
		'''
		"type": "array",
		«IF primitiveObject.type.array.arrayType !== null»
		"items": {
			"type" : «primitiveObject.type.array.arrayType»
		}
		«ENDIF»
		'''
	}
	
	def generatePrimitiveNumberObject(PrimitiveObject primitiveObject){
		'''
		,"type" : "number"
		'''
	}
	
	def generatePropertyString(PrimitiveObject mod){
		'''
		"«mod.type.name»": {
		"type": "string"
		«IF !mod.primitiveProperties.empty»
			«FOR prop: mod.primitiveProperties»
				«IF prop.stringFormat !== FormatTypes.DEFAULT»
					,
					"format": "«prop.stringFormat.getName.toString»"
				«ENDIF»
				«IF prop.stringLength !== null»
					,
					"minLength": «prop.stringLength.split("-").get(0)»,
					"maxLength": «prop.stringLength.split("-").get(1)»
				«ENDIF»
				«IF prop.patternString !== null»
					,
					"pattern": "«prop.patternString»"
				«ENDIF»
			«ENDFOR»
		«ENDIF»
		},
		'''
	}
	
	def generateStringPrimitiveObject(PrimitiveObject mod){
		'''
		"$id": "«mod.type.name»",
		"type": "string"
		«IF !mod.primitiveProperties.empty»
			«FOR prop: mod.primitiveProperties»
				«IF prop.stringFormat !== FormatTypes.DEFAULT»
					,
					"format": "«prop.stringFormat.getName.toString»"
				«ENDIF»
				«IF prop.stringLength !== null»
					,
					"minLength": «prop.stringLength.split("-").get(0)»,
					"maxLength": «prop.stringLength.split("-").get(1)»
				«ENDIF»
				«IF prop.patternString !== null»
					,
					"pattern": "«prop.patternString»"
				«ENDIF»
			«ENDFOR»
		«ENDIF»
		,
		'''
	}
	
	def generateMainObject(MainObject mod){
		'''
		«IF !mod.name.empty»
			"$id": "«mod.name»",
			"type": "object",
			«ENDIF»
			«IF !mod.properties.empty»
				"properties": {
				«FOR prop: mod.properties»
					«IF prop.mainObject !== null»
						"$«prop.mainObject.name»": {
							"type": "object"
						}
					«ELSEIF prop.primitiveObject !== null»
						«generatePrimitiveObject(prop.primitiveObject)»
					«ENDIF»
				«ENDFOR»
				},
			«ENDIF»
		«IF mod.inherits !== null»
			«generateExtendsObjects(mod)»
		«ENDIF»
		'''
	}
	
	def generatePrimitiveObject(PrimitiveObject mod){
		
		'''
		«IF mod.type.name !== null »
			«generateStringPrimitiveObject(mod)»
		«ELSEIF mod.type.array !== null»
			«generatePrimitiveArrayObject(mod)»
		«ELSEIF mod.type.number !== null»
			«generatePrimitiveNumberObject(mod)»
		«ENDIF»
		'''
	}
}