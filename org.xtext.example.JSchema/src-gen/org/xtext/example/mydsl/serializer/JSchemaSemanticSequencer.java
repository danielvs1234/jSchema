/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.jSchema.Array;
import org.xtext.example.mydsl.jSchema.JSchemaPackage;
import org.xtext.example.mydsl.jSchema.Null;
import org.xtext.example.mydsl.jSchema.ObjectRequireMinimumProperties;
import org.xtext.example.mydsl.jSchema.Properties;
import org.xtext.example.mydsl.jSchema.Property;
import org.xtext.example.mydsl.jSchema.STRING;
import org.xtext.example.mydsl.services.JSchemaGrammarAccess;

@SuppressWarnings("all")
public class JSchemaSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private JSchemaGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == JSchemaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JSchemaPackage.ARRAY:
				if (rule == grammarAccess.getArrayRule()) {
					sequence_Array(context, (Array) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypesRule()) {
					sequence_Types(context, (Array) semanticObject); 
					return; 
				}
				else break;
			case JSchemaPackage.BOOLEAN:
				sequence_Types(context, (org.xtext.example.mydsl.jSchema.Boolean) semanticObject); 
				return; 
			case JSchemaPackage.NULL:
				sequence_Types(context, (Null) semanticObject); 
				return; 
			case JSchemaPackage.NUMBER:
				if (rule == grammarAccess.getNumberRule()) {
					sequence_Number(context, (org.xtext.example.mydsl.jSchema.Number) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getModelRule()
						|| rule == grammarAccess.getObjectRule()
						|| rule == grammarAccess.getObjectRequireMinimumPropertiesRule()) {
					sequence_Number_ObjectRequireMinimumProperties(context, (org.xtext.example.mydsl.jSchema.Number) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypesRule()) {
					sequence_Types(context, (org.xtext.example.mydsl.jSchema.Number) semanticObject); 
					return; 
				}
				else break;
			case JSchemaPackage.OBJECT:
				sequence_Types(context, (org.xtext.example.mydsl.jSchema.Object) semanticObject); 
				return; 
			case JSchemaPackage.OBJECT_REQUIRE_MINIMUM_PROPERTIES:
				sequence_ObjectRequireMinimumProperties(context, (ObjectRequireMinimumProperties) semanticObject); 
				return; 
			case JSchemaPackage.PROPERTIES:
				sequence_Properties(context, (Properties) semanticObject); 
				return; 
			case JSchemaPackage.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			case JSchemaPackage.STRING:
				sequence_Types(context, (STRING) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Array returns Array
	 *
	 * Constraint:
	 *     (array?='[' length=INT?)
	 */
	protected void sequence_Array(ISerializationContext context, Array semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number returns Number
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Number(ISerializationContext context, org.xtext.example.mydsl.jSchema.Number semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JSchemaPackage.Literals.NUMBER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JSchemaPackage.Literals.NUMBER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Number
	 *     Object returns Number
	 *     ObjectRequireMinimumProperties returns Number
	 *
	 * Constraint:
	 *     (value=INT properties=Properties)
	 */
	protected void sequence_Number_ObjectRequireMinimumProperties(ISerializationContext context, org.xtext.example.mydsl.jSchema.Number semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JSchemaPackage.Literals.NUMBER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JSchemaPackage.Literals.NUMBER__VALUE));
			if (transientValues.isValueTransient(semanticObject, JSchemaPackage.Literals.NUMBER__PROPERTIES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JSchemaPackage.Literals.NUMBER__PROPERTIES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0_1_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getObjectRequireMinimumPropertiesAccess().getPropertiesPropertiesParserRuleCall_4_0(), semanticObject.getProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns ObjectRequireMinimumProperties
	 *     Object returns ObjectRequireMinimumProperties
	 *     ObjectRequireMinimumProperties returns ObjectRequireMinimumProperties
	 *
	 * Constraint:
	 *     properties=Properties
	 */
	protected void sequence_ObjectRequireMinimumProperties(ISerializationContext context, ObjectRequireMinimumProperties semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Properties returns Properties
	 *
	 * Constraint:
	 *     properties+=Property*
	 */
	protected void sequence_Properties(ISerializationContext context, Properties semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Property returns Property
	 *
	 * Constraint:
	 *     (name=ID type=Types)
	 */
	protected void sequence_Property(ISerializationContext context, Property semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JSchemaPackage.Literals.PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JSchemaPackage.Literals.PROPERTY__NAME));
			if (transientValues.isValueTransient(semanticObject, JSchemaPackage.Literals.PROPERTY__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JSchemaPackage.Literals.PROPERTY__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyAccess().getTypeTypesParserRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Types returns Array
	 *
	 * Constraint:
	 *     {Array}
	 */
	protected void sequence_Types(ISerializationContext context, Array semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Types returns Boolean
	 *
	 * Constraint:
	 *     {Boolean}
	 */
	protected void sequence_Types(ISerializationContext context, org.xtext.example.mydsl.jSchema.Boolean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Types returns Null
	 *
	 * Constraint:
	 *     {Null}
	 */
	protected void sequence_Types(ISerializationContext context, Null semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Types returns Number
	 *
	 * Constraint:
	 *     {Number}
	 */
	protected void sequence_Types(ISerializationContext context, org.xtext.example.mydsl.jSchema.Number semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Types returns Object
	 *
	 * Constraint:
	 *     {Object}
	 */
	protected void sequence_Types(ISerializationContext context, org.xtext.example.mydsl.jSchema.Object semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Types returns STRING
	 *
	 * Constraint:
	 *     {STRING}
	 */
	protected void sequence_Types(ISerializationContext context, STRING semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
