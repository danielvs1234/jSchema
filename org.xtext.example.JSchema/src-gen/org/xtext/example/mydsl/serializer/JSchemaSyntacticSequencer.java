/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.JSchemaGrammarAccess;

@SuppressWarnings("all")
public class JSchemaSyntacticSequencer extends AbstractSyntacticSequencer {

	protected JSchemaGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Array_RightSquareBracketKeyword_2_q;
	protected AbstractElementAlias match_ObjectRequireMinimumProperties_MaximumKeyword_1_1_or_MinimumKeyword_1_0;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (JSchemaGrammarAccess) access;
		match_Array_RightSquareBracketKeyword_2_q = new TokenAlias(false, true, grammarAccess.getArrayAccess().getRightSquareBracketKeyword_2());
		match_ObjectRequireMinimumProperties_MaximumKeyword_1_1_or_MinimumKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getObjectRequireMinimumPropertiesAccess().getMaximumKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getObjectRequireMinimumPropertiesAccess().getMinimumKeyword_1_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getDOUBLERule())
			return getDOUBLEToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal DOUBLE:
	 * 	INT('.'INT+)?
	 * ;
	 */
	protected String getDOUBLEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Array_RightSquareBracketKeyword_2_q.equals(syntax))
				emit_Array_RightSquareBracketKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ObjectRequireMinimumProperties_MaximumKeyword_1_1_or_MinimumKeyword_1_0.equals(syntax))
				emit_ObjectRequireMinimumProperties_MaximumKeyword_1_1_or_MinimumKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ']'?
	 *
	 * This ambiguous syntax occurs at:
	 *     array?='[' (ambiguity) (rule end)
	 *     length=INT (ambiguity) (rule end)
	 */
	protected void emit_Array_RightSquareBracketKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'minimum' | 'maximum'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'object' 'require' (ambiguity) 'num' value=INT
	 *     (rule start) 'object' 'require' (ambiguity) DOUBLE 'properties' properties=Properties
	 *     (rule start) 'require' (ambiguity) 'num' value=INT
	 *     (rule start) 'require' (ambiguity) DOUBLE 'properties' properties=Properties
	 */
	protected void emit_ObjectRequireMinimumProperties_MaximumKeyword_1_1_or_MinimumKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
