/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.jSchema.impl;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtext.example.mydsl.jSchema.Extends;
import org.xtext.example.mydsl.jSchema.JSchemaPackage;
import org.xtext.example.mydsl.jSchema.MainObject;
import org.xtext.example.mydsl.jSchema.PrimitiveObject;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Extends</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.jSchema.impl.ExtendsImpl#getExtensionMainObject <em>Extension Main Object</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.jSchema.impl.ExtendsImpl#getExtensionPrimitiveObject <em>Extension Primitive Object</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExtendsImpl extends MinimalEObjectImpl.Container implements Extends
{
  /**
   * The cached value of the '{@link #getExtensionMainObject() <em>Extension Main Object</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExtensionMainObject()
   * @generated
   * @ordered
   */
  protected EList<MainObject> extensionMainObject;

  /**
   * The cached value of the '{@link #getExtensionPrimitiveObject() <em>Extension Primitive Object</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExtensionPrimitiveObject()
   * @generated
   * @ordered
   */
  protected EList<PrimitiveObject> extensionPrimitiveObject;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExtendsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JSchemaPackage.Literals.EXTENDS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<MainObject> getExtensionMainObject()
  {
    if (extensionMainObject == null)
    {
      extensionMainObject = new EObjectResolvingEList<MainObject>(MainObject.class, this, JSchemaPackage.EXTENDS__EXTENSION_MAIN_OBJECT);
    }
    return extensionMainObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<PrimitiveObject> getExtensionPrimitiveObject()
  {
    if (extensionPrimitiveObject == null)
    {
      extensionPrimitiveObject = new EObjectResolvingEList<PrimitiveObject>(PrimitiveObject.class, this, JSchemaPackage.EXTENDS__EXTENSION_PRIMITIVE_OBJECT);
    }
    return extensionPrimitiveObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JSchemaPackage.EXTENDS__EXTENSION_MAIN_OBJECT:
        return getExtensionMainObject();
      case JSchemaPackage.EXTENDS__EXTENSION_PRIMITIVE_OBJECT:
        return getExtensionPrimitiveObject();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JSchemaPackage.EXTENDS__EXTENSION_MAIN_OBJECT:
        getExtensionMainObject().clear();
        getExtensionMainObject().addAll((Collection<? extends MainObject>)newValue);
        return;
      case JSchemaPackage.EXTENDS__EXTENSION_PRIMITIVE_OBJECT:
        getExtensionPrimitiveObject().clear();
        getExtensionPrimitiveObject().addAll((Collection<? extends PrimitiveObject>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JSchemaPackage.EXTENDS__EXTENSION_MAIN_OBJECT:
        getExtensionMainObject().clear();
        return;
      case JSchemaPackage.EXTENDS__EXTENSION_PRIMITIVE_OBJECT:
        getExtensionPrimitiveObject().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JSchemaPackage.EXTENDS__EXTENSION_MAIN_OBJECT:
        return extensionMainObject != null && !extensionMainObject.isEmpty();
      case JSchemaPackage.EXTENDS__EXTENSION_PRIMITIVE_OBJECT:
        return extensionPrimitiveObject != null && !extensionPrimitiveObject.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ExtendsImpl
