/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.jSchema.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.jSchema.Array;
import org.xtext.example.mydsl.jSchema.JSchemaFactory;
import org.xtext.example.mydsl.jSchema.JSchemaPackage;
import org.xtext.example.mydsl.jSchema.Model;
import org.xtext.example.mydsl.jSchema.Null;
import org.xtext.example.mydsl.jSchema.ObjectRequireMinimumProperties;
import org.xtext.example.mydsl.jSchema.Properties;
import org.xtext.example.mydsl.jSchema.Property;
import org.xtext.example.mydsl.jSchema.STRING;
import org.xtext.example.mydsl.jSchema.Types;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class JSchemaFactoryImpl extends EFactoryImpl implements JSchemaFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static JSchemaFactory init()
  {
    try
    {
      JSchemaFactory theJSchemaFactory = (JSchemaFactory)EPackage.Registry.INSTANCE.getEFactory(JSchemaPackage.eNS_URI);
      if (theJSchemaFactory != null)
      {
        return theJSchemaFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new JSchemaFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JSchemaFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case JSchemaPackage.MODEL: return createModel();
      case JSchemaPackage.NUMBER: return createNumber();
      case JSchemaPackage.OBJECT: return createObject();
      case JSchemaPackage.OBJECT_REQUIRE_MINIMUM_PROPERTIES: return createObjectRequireMinimumProperties();
      case JSchemaPackage.TYPES: return createTypes();
      case JSchemaPackage.PROPERTIES: return createProperties();
      case JSchemaPackage.PROPERTY: return createProperty();
      case JSchemaPackage.ARRAY: return createArray();
      case JSchemaPackage.STRING: return createSTRING();
      case JSchemaPackage.BOOLEAN: return createBoolean();
      case JSchemaPackage.NULL: return createNull();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.mydsl.jSchema.Number createNumber()
  {
    NumberImpl number = new NumberImpl();
    return number;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.mydsl.jSchema.Object createObject()
  {
    ObjectImpl object = new ObjectImpl();
    return object;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjectRequireMinimumProperties createObjectRequireMinimumProperties()
  {
    ObjectRequireMinimumPropertiesImpl objectRequireMinimumProperties = new ObjectRequireMinimumPropertiesImpl();
    return objectRequireMinimumProperties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Types createTypes()
  {
    TypesImpl types = new TypesImpl();
    return types;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Properties createProperties()
  {
    PropertiesImpl properties = new PropertiesImpl();
    return properties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Property createProperty()
  {
    PropertyImpl property = new PropertyImpl();
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Array createArray()
  {
    ArrayImpl array = new ArrayImpl();
    return array;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STRING createSTRING()
  {
    STRINGImpl string = new STRINGImpl();
    return string;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.mydsl.jSchema.Boolean createBoolean()
  {
    BooleanImpl boolean_ = new BooleanImpl();
    return boolean_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Null createNull()
  {
    NullImpl null_ = new NullImpl();
    return null_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JSchemaPackage getJSchemaPackage()
  {
    return (JSchemaPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static JSchemaPackage getPackage()
  {
    return JSchemaPackage.eINSTANCE;
  }

} //JSchemaFactoryImpl
