/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.jSchema.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.jSchema.Includes;
import org.xtext.example.mydsl.jSchema.IsRoot;
import org.xtext.example.mydsl.jSchema.JSchemaPackage;
import org.xtext.example.mydsl.jSchema.MainObject;
import org.xtext.example.mydsl.jSchema.hasProperties;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Main Object</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.jSchema.impl.MainObjectImpl#getObjectName <em>Object Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.jSchema.impl.MainObjectImpl#getRoot <em>Root</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.jSchema.impl.MainObjectImpl#getIncludeObjects <em>Include Objects</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.jSchema.impl.MainObjectImpl#getProperties <em>Properties</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MainObjectImpl extends AbstractObjectImpl implements MainObject
{
  /**
   * The default value of the '{@link #getObjectName() <em>Object Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObjectName()
   * @generated
   * @ordered
   */
  protected static final String OBJECT_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getObjectName() <em>Object Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObjectName()
   * @generated
   * @ordered
   */
  protected String objectName = OBJECT_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getRoot() <em>Root</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRoot()
   * @generated
   * @ordered
   */
  protected IsRoot root;

  /**
   * The cached value of the '{@link #getIncludeObjects() <em>Include Objects</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIncludeObjects()
   * @generated
   * @ordered
   */
  protected Includes includeObjects;

  /**
   * The cached value of the '{@link #getProperties() <em>Properties</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperties()
   * @generated
   * @ordered
   */
  protected EList<hasProperties> properties;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MainObjectImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JSchemaPackage.Literals.MAIN_OBJECT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getObjectName()
  {
    return objectName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setObjectName(String newObjectName)
  {
    String oldObjectName = objectName;
    objectName = newObjectName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JSchemaPackage.MAIN_OBJECT__OBJECT_NAME, oldObjectName, objectName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IsRoot getRoot()
  {
    return root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRoot(IsRoot newRoot, NotificationChain msgs)
  {
    IsRoot oldRoot = root;
    root = newRoot;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JSchemaPackage.MAIN_OBJECT__ROOT, oldRoot, newRoot);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRoot(IsRoot newRoot)
  {
    if (newRoot != root)
    {
      NotificationChain msgs = null;
      if (root != null)
        msgs = ((InternalEObject)root).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JSchemaPackage.MAIN_OBJECT__ROOT, null, msgs);
      if (newRoot != null)
        msgs = ((InternalEObject)newRoot).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JSchemaPackage.MAIN_OBJECT__ROOT, null, msgs);
      msgs = basicSetRoot(newRoot, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JSchemaPackage.MAIN_OBJECT__ROOT, newRoot, newRoot));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Includes getIncludeObjects()
  {
    return includeObjects;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIncludeObjects(Includes newIncludeObjects, NotificationChain msgs)
  {
    Includes oldIncludeObjects = includeObjects;
    includeObjects = newIncludeObjects;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JSchemaPackage.MAIN_OBJECT__INCLUDE_OBJECTS, oldIncludeObjects, newIncludeObjects);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIncludeObjects(Includes newIncludeObjects)
  {
    if (newIncludeObjects != includeObjects)
    {
      NotificationChain msgs = null;
      if (includeObjects != null)
        msgs = ((InternalEObject)includeObjects).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JSchemaPackage.MAIN_OBJECT__INCLUDE_OBJECTS, null, msgs);
      if (newIncludeObjects != null)
        msgs = ((InternalEObject)newIncludeObjects).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JSchemaPackage.MAIN_OBJECT__INCLUDE_OBJECTS, null, msgs);
      msgs = basicSetIncludeObjects(newIncludeObjects, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JSchemaPackage.MAIN_OBJECT__INCLUDE_OBJECTS, newIncludeObjects, newIncludeObjects));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<hasProperties> getProperties()
  {
    if (properties == null)
    {
      properties = new EObjectContainmentEList<hasProperties>(hasProperties.class, this, JSchemaPackage.MAIN_OBJECT__PROPERTIES);
    }
    return properties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JSchemaPackage.MAIN_OBJECT__ROOT:
        return basicSetRoot(null, msgs);
      case JSchemaPackage.MAIN_OBJECT__INCLUDE_OBJECTS:
        return basicSetIncludeObjects(null, msgs);
      case JSchemaPackage.MAIN_OBJECT__PROPERTIES:
        return ((InternalEList<?>)getProperties()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JSchemaPackage.MAIN_OBJECT__OBJECT_NAME:
        return getObjectName();
      case JSchemaPackage.MAIN_OBJECT__ROOT:
        return getRoot();
      case JSchemaPackage.MAIN_OBJECT__INCLUDE_OBJECTS:
        return getIncludeObjects();
      case JSchemaPackage.MAIN_OBJECT__PROPERTIES:
        return getProperties();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JSchemaPackage.MAIN_OBJECT__OBJECT_NAME:
        setObjectName((String)newValue);
        return;
      case JSchemaPackage.MAIN_OBJECT__ROOT:
        setRoot((IsRoot)newValue);
        return;
      case JSchemaPackage.MAIN_OBJECT__INCLUDE_OBJECTS:
        setIncludeObjects((Includes)newValue);
        return;
      case JSchemaPackage.MAIN_OBJECT__PROPERTIES:
        getProperties().clear();
        getProperties().addAll((Collection<? extends hasProperties>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JSchemaPackage.MAIN_OBJECT__OBJECT_NAME:
        setObjectName(OBJECT_NAME_EDEFAULT);
        return;
      case JSchemaPackage.MAIN_OBJECT__ROOT:
        setRoot((IsRoot)null);
        return;
      case JSchemaPackage.MAIN_OBJECT__INCLUDE_OBJECTS:
        setIncludeObjects((Includes)null);
        return;
      case JSchemaPackage.MAIN_OBJECT__PROPERTIES:
        getProperties().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JSchemaPackage.MAIN_OBJECT__OBJECT_NAME:
        return OBJECT_NAME_EDEFAULT == null ? objectName != null : !OBJECT_NAME_EDEFAULT.equals(objectName);
      case JSchemaPackage.MAIN_OBJECT__ROOT:
        return root != null;
      case JSchemaPackage.MAIN_OBJECT__INCLUDE_OBJECTS:
        return includeObjects != null;
      case JSchemaPackage.MAIN_OBJECT__PROPERTIES:
        return properties != null && !properties.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (objectName: ");
    result.append(objectName);
    result.append(')');
    return result.toString();
  }

} //MainObjectImpl
