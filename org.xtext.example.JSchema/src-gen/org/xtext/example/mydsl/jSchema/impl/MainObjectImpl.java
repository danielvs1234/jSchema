/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.jSchema.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.jSchema.AbstractObject;
import org.xtext.example.mydsl.jSchema.IsRoot;
import org.xtext.example.mydsl.jSchema.JSchemaPackage;
import org.xtext.example.mydsl.jSchema.MainObject;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Main Object</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.jSchema.impl.MainObjectImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.jSchema.impl.MainObjectImpl#getRoot <em>Root</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.jSchema.impl.MainObjectImpl#getInherits <em>Inherits</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.jSchema.impl.MainObjectImpl#getProperties <em>Properties</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MainObjectImpl extends MinimalEObjectImpl.Container implements MainObject
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getRoot() <em>Root</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRoot()
   * @generated
   * @ordered
   */
  protected IsRoot root;

  /**
   * The cached value of the '{@link #getInherits() <em>Inherits</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInherits()
   * @generated
   * @ordered
   */
  protected EObject inherits;

  /**
   * The cached value of the '{@link #getProperties() <em>Properties</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperties()
   * @generated
   * @ordered
   */
  protected EList<AbstractObject> properties;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MainObjectImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JSchemaPackage.Literals.MAIN_OBJECT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JSchemaPackage.MAIN_OBJECT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IsRoot getRoot()
  {
    return root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRoot(IsRoot newRoot, NotificationChain msgs)
  {
    IsRoot oldRoot = root;
    root = newRoot;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JSchemaPackage.MAIN_OBJECT__ROOT, oldRoot, newRoot);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRoot(IsRoot newRoot)
  {
    if (newRoot != root)
    {
      NotificationChain msgs = null;
      if (root != null)
        msgs = ((InternalEObject)root).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JSchemaPackage.MAIN_OBJECT__ROOT, null, msgs);
      if (newRoot != null)
        msgs = ((InternalEObject)newRoot).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JSchemaPackage.MAIN_OBJECT__ROOT, null, msgs);
      msgs = basicSetRoot(newRoot, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JSchemaPackage.MAIN_OBJECT__ROOT, newRoot, newRoot));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject getInherits()
  {
    return inherits;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInherits(EObject newInherits, NotificationChain msgs)
  {
    EObject oldInherits = inherits;
    inherits = newInherits;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JSchemaPackage.MAIN_OBJECT__INHERITS, oldInherits, newInherits);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInherits(EObject newInherits)
  {
    if (newInherits != inherits)
    {
      NotificationChain msgs = null;
      if (inherits != null)
        msgs = ((InternalEObject)inherits).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JSchemaPackage.MAIN_OBJECT__INHERITS, null, msgs);
      if (newInherits != null)
        msgs = ((InternalEObject)newInherits).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JSchemaPackage.MAIN_OBJECT__INHERITS, null, msgs);
      msgs = basicSetInherits(newInherits, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JSchemaPackage.MAIN_OBJECT__INHERITS, newInherits, newInherits));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AbstractObject> getProperties()
  {
    if (properties == null)
    {
      properties = new EObjectContainmentEList<AbstractObject>(AbstractObject.class, this, JSchemaPackage.MAIN_OBJECT__PROPERTIES);
    }
    return properties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JSchemaPackage.MAIN_OBJECT__ROOT:
        return basicSetRoot(null, msgs);
      case JSchemaPackage.MAIN_OBJECT__INHERITS:
        return basicSetInherits(null, msgs);
      case JSchemaPackage.MAIN_OBJECT__PROPERTIES:
        return ((InternalEList<?>)getProperties()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JSchemaPackage.MAIN_OBJECT__NAME:
        return getName();
      case JSchemaPackage.MAIN_OBJECT__ROOT:
        return getRoot();
      case JSchemaPackage.MAIN_OBJECT__INHERITS:
        return getInherits();
      case JSchemaPackage.MAIN_OBJECT__PROPERTIES:
        return getProperties();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JSchemaPackage.MAIN_OBJECT__NAME:
        setName((String)newValue);
        return;
      case JSchemaPackage.MAIN_OBJECT__ROOT:
        setRoot((IsRoot)newValue);
        return;
      case JSchemaPackage.MAIN_OBJECT__INHERITS:
        setInherits((EObject)newValue);
        return;
      case JSchemaPackage.MAIN_OBJECT__PROPERTIES:
        getProperties().clear();
        getProperties().addAll((Collection<? extends AbstractObject>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JSchemaPackage.MAIN_OBJECT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case JSchemaPackage.MAIN_OBJECT__ROOT:
        setRoot((IsRoot)null);
        return;
      case JSchemaPackage.MAIN_OBJECT__INHERITS:
        setInherits((EObject)null);
        return;
      case JSchemaPackage.MAIN_OBJECT__PROPERTIES:
        getProperties().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JSchemaPackage.MAIN_OBJECT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case JSchemaPackage.MAIN_OBJECT__ROOT:
        return root != null;
      case JSchemaPackage.MAIN_OBJECT__INHERITS:
        return inherits != null;
      case JSchemaPackage.MAIN_OBJECT__PROPERTIES:
        return properties != null && !properties.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //MainObjectImpl
