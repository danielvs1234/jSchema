/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JSchemaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.Model");
		private final RuleCall cObjectParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Model:
		//	Object;
		@Override public ParserRule getRule() { return rule; }
		
		//Object
		public RuleCall getObjectParserRuleCall() { return cObjectParserRuleCall; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNumKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final RuleCall cDOUBLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Number:
		//	'num' value=INT | DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'num' value=INT | DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'num' value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//'num'
		public Keyword getNumKeyword_0_0() { return cNumKeyword_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_1() { return cDOUBLETerminalRuleCall_1; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cObjectRequireMinimumPropertiesParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Object:
		//	'object' ObjectRequireMinimumProperties?;
		@Override public ParserRule getRule() { return rule; }
		
		//'object' ObjectRequireMinimumProperties?
		public Group getGroup() { return cGroup; }
		
		//'object'
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }
		
		//ObjectRequireMinimumProperties?
		public RuleCall getObjectRequireMinimumPropertiesParserRuleCall_1() { return cObjectRequireMinimumPropertiesParserRuleCall_1; }
	}
	public class ObjectRequireMinimumPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.ObjectRequireMinimumProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cMinimumKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cMaximumKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cPropertiesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesPropertiesParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		
		//ObjectRequireMinimumProperties:
		//	'require' ('minimum' | 'maximum') Number 'properties' properties=Properties;
		@Override public ParserRule getRule() { return rule; }
		
		//'require' ('minimum' | 'maximum') Number 'properties' properties=Properties
		public Group getGroup() { return cGroup; }
		
		//'require'
		public Keyword getRequireKeyword_0() { return cRequireKeyword_0; }
		
		//('minimum' | 'maximum')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'minimum'
		public Keyword getMinimumKeyword_1_0() { return cMinimumKeyword_1_0; }
		
		//'maximum'
		public Keyword getMaximumKeyword_1_1() { return cMaximumKeyword_1_1; }
		
		//Number
		public RuleCall getNumberParserRuleCall_2() { return cNumberParserRuleCall_2; }
		
		//'properties'
		public Keyword getPropertiesKeyword_3() { return cPropertiesKeyword_3; }
		
		//properties=Properties
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }
		
		//Properties
		public RuleCall getPropertiesPropertiesParserRuleCall_4_0() { return cPropertiesPropertiesParserRuleCall_4_0; }
	}
	public class TypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.Types");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cObjectAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cObjectKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSTRINGAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cStringKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNumberAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cNumberKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cArrayAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cArrayKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cBooleanAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cBooleanKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cNullAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cNullKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		
		//Types:
		//	{Object} 'object' | {STRING} 'string' | {Number} 'number' | {Array} 'array' | {Boolean} 'boolean' | {Null} 'null';
		@Override public ParserRule getRule() { return rule; }
		
		//{Object} 'object' | {STRING} 'string' | {Number} 'number' | {Array} 'array' | {Boolean} 'boolean' | {Null} 'null'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Object} 'object'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Object}
		public Action getObjectAction_0_0() { return cObjectAction_0_0; }
		
		//'object'
		public Keyword getObjectKeyword_0_1() { return cObjectKeyword_0_1; }
		
		//{STRING} 'string'
		public Group getGroup_1() { return cGroup_1; }
		
		//{STRING}
		public Action getSTRINGAction_1_0() { return cSTRINGAction_1_0; }
		
		//'string'
		public Keyword getStringKeyword_1_1() { return cStringKeyword_1_1; }
		
		//{Number} 'number'
		public Group getGroup_2() { return cGroup_2; }
		
		//{Number}
		public Action getNumberAction_2_0() { return cNumberAction_2_0; }
		
		//'number'
		public Keyword getNumberKeyword_2_1() { return cNumberKeyword_2_1; }
		
		//{Array} 'array'
		public Group getGroup_3() { return cGroup_3; }
		
		//{Array}
		public Action getArrayAction_3_0() { return cArrayAction_3_0; }
		
		//'array'
		public Keyword getArrayKeyword_3_1() { return cArrayKeyword_3_1; }
		
		//{Boolean} 'boolean'
		public Group getGroup_4() { return cGroup_4; }
		
		//{Boolean}
		public Action getBooleanAction_4_0() { return cBooleanAction_4_0; }
		
		//'boolean'
		public Keyword getBooleanKeyword_4_1() { return cBooleanKeyword_4_1; }
		
		//{Null} 'null'
		public Group getGroup_5() { return cGroup_5; }
		
		//{Null}
		public Action getNullAction_5_0() { return cNullAction_5_0; }
		
		//'null'
		public Keyword getNullKeyword_5_1() { return cNullKeyword_5_1; }
	}
	public class PropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.Properties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertiesAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPropertiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_1_0 = (RuleCall)cPropertiesAssignment_1.eContents().get(0);
		
		//Properties:
		//	{Properties} properties+=Property*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Properties} properties+=Property*
		public Group getGroup() { return cGroup; }
		
		//{Properties}
		public Action getPropertiesAction_0() { return cPropertiesAction_0; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_1() { return cPropertiesAssignment_1; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_1_0() { return cPropertiesPropertyParserRuleCall_1_0; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypesParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Property:
		//	'name' name=ID 'type' type=Types;
		@Override public ParserRule getRule() { return rule; }
		
		//'name' name=ID 'type' type=Types
		public Group getGroup() { return cGroup; }
		
		//'name'
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//type=Types
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Types
		public RuleCall getTypeTypesParserRuleCall_3_0() { return cTypeTypesParserRuleCall_3_0; }
	}
	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArrayAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cArrayLeftSquareBracketKeyword_0_0 = (Keyword)cArrayAssignment_0.eContents().get(0);
		private final Assignment cLengthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLengthINTTerminalRuleCall_1_0 = (RuleCall)cLengthAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////Types
		//Array:
		//	array?='[' length=INT? ']'?;
		@Override public ParserRule getRule() { return rule; }
		
		//array?='[' length=INT? ']'?
		public Group getGroup() { return cGroup; }
		
		//array?='['
		public Assignment getArrayAssignment_0() { return cArrayAssignment_0; }
		
		//'['
		public Keyword getArrayLeftSquareBracketKeyword_0_0() { return cArrayLeftSquareBracketKeyword_0_0; }
		
		//length=INT?
		public Assignment getLengthAssignment_1() { return cLengthAssignment_1; }
		
		//INT
		public RuleCall getLengthINTTerminalRuleCall_1_0() { return cLengthINTTerminalRuleCall_1_0; }
		
		//']'?
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	
	
	private final ModelElements pModel;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tDOUBLE;
	private final NumberElements pNumber;
	private final ObjectElements pObject;
	private final ObjectRequireMinimumPropertiesElements pObjectRequireMinimumProperties;
	private final TypesElements pTypes;
	private final PropertiesElements pProperties;
	private final PropertyElements pProperty;
	private final ArrayElements pArray;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JSchemaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.BOOLEAN");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.DOUBLE");
		this.pNumber = new NumberElements();
		this.pObject = new ObjectElements();
		this.pObjectRequireMinimumProperties = new ObjectRequireMinimumPropertiesElements();
		this.pTypes = new TypesElements();
		this.pProperties = new PropertiesElements();
		this.pProperty = new PropertyElements();
		this.pArray = new ArrayElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.JSchema".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	Object;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//terminal BOOLEAN:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal DOUBLE:
	//	INT ('.' INT+)?;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//Number:
	//	'num' value=INT | DOUBLE;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Object:
	//	'object' ObjectRequireMinimumProperties?;
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//ObjectRequireMinimumProperties:
	//	'require' ('minimum' | 'maximum') Number 'properties' properties=Properties;
	public ObjectRequireMinimumPropertiesElements getObjectRequireMinimumPropertiesAccess() {
		return pObjectRequireMinimumProperties;
	}
	
	public ParserRule getObjectRequireMinimumPropertiesRule() {
		return getObjectRequireMinimumPropertiesAccess().getRule();
	}
	
	//Types:
	//	{Object} 'object' | {STRING} 'string' | {Number} 'number' | {Array} 'array' | {Boolean} 'boolean' | {Null} 'null';
	public TypesElements getTypesAccess() {
		return pTypes;
	}
	
	public ParserRule getTypesRule() {
		return getTypesAccess().getRule();
	}
	
	//Properties:
	//	{Properties} properties+=Property*;
	public PropertiesElements getPropertiesAccess() {
		return pProperties;
	}
	
	public ParserRule getPropertiesRule() {
		return getPropertiesAccess().getRule();
	}
	
	//Property:
	//	'name' name=ID 'type' type=Types;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	////Types
	//Array:
	//	array?='[' length=INT? ']'?;
	public ArrayElements getArrayAccess() {
		return pArray;
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
