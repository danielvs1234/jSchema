/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JSchemaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveObjectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Model:
		//	Object | PrimitiveObject;
		@Override public ParserRule getRule() { return rule; }
		
		//Object | PrimitiveObject
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Object
		public RuleCall getObjectParserRuleCall_0() { return cObjectParserRuleCall_0; }
		
		//PrimitiveObject
		public RuleCall getPrimitiveObjectParserRuleCall_1() { return cPrimitiveObjectParserRuleCall_1; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumberINTTerminalRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDecimalAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDecimalINTTerminalRuleCall_1_1_0 = (RuleCall)cDecimalAssignment_1_1.eContents().get(0);
		
		//Number:
		//	number=INT ('.' decimal=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//number=INT ('.' decimal=INT)?
		public Group getGroup() { return cGroup; }
		
		//number=INT
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_0_0() { return cNumberINTTerminalRuleCall_0_0; }
		
		//('.' decimal=INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//decimal=INT
		public Assignment getDecimalAssignment_1_1() { return cDecimalAssignment_1_1; }
		
		//INT
		public RuleCall getDecimalINTTerminalRuleCall_1_1_0() { return cDecimalINTTerminalRuleCall_1_1_0; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIncludesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIncludeObjectsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIncludeObjectsIncludesParserRuleCall_1_1_0 = (RuleCall)cIncludeObjectsAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesHasPropertiesParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////(nestedObjectName=ID nestedObject=Object)
		//Object:
		//	name=ID ('includes' includeObjects=Includes)? '{' properties=hasProperties? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('includes' includeObjects=Includes)? '{' properties=hasProperties? '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('includes' includeObjects=Includes)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'includes'
		public Keyword getIncludesKeyword_1_0() { return cIncludesKeyword_1_0; }
		
		//includeObjects=Includes
		public Assignment getIncludeObjectsAssignment_1_1() { return cIncludeObjectsAssignment_1_1; }
		
		//Includes
		public RuleCall getIncludeObjectsIncludesParserRuleCall_1_1_0() { return cIncludeObjectsIncludesParserRuleCall_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//properties=hasProperties?
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }
		
		//hasProperties
		public RuleCall getPropertiesHasPropertiesParserRuleCall_3_0() { return cPropertiesHasPropertiesParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PrimitiveObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.PrimitiveObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypesParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPrimitivePropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPrimitivePropertiesPrimitivePropertiesParserRuleCall_2_1_0 = (RuleCall)cPrimitivePropertiesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cPrimitivePropertiesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cPrimitivePropertiesPrimitivePropertiesParserRuleCall_2_2_1_0 = (RuleCall)cPrimitivePropertiesAssignment_2_2_1.eContents().get(0);
		
		//PrimitiveObject:
		//	type=Types name=ID ('with' primitiveProperties+=PrimitiveProperties (','
		//	primitiveProperties+=PrimitiveProperties)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Types name=ID ('with' primitiveProperties+=PrimitiveProperties (',' primitiveProperties+=PrimitiveProperties)*)?
		public Group getGroup() { return cGroup; }
		
		//type=Types
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Types
		public RuleCall getTypeTypesParserRuleCall_0_0() { return cTypeTypesParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with' primitiveProperties+=PrimitiveProperties (',' primitiveProperties+=PrimitiveProperties)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with'
		public Keyword getWithKeyword_2_0() { return cWithKeyword_2_0; }
		
		//primitiveProperties+=PrimitiveProperties
		public Assignment getPrimitivePropertiesAssignment_2_1() { return cPrimitivePropertiesAssignment_2_1; }
		
		//PrimitiveProperties
		public RuleCall getPrimitivePropertiesPrimitivePropertiesParserRuleCall_2_1_0() { return cPrimitivePropertiesPrimitivePropertiesParserRuleCall_2_1_0; }
		
		//(',' primitiveProperties+=PrimitiveProperties)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//primitiveProperties+=PrimitiveProperties
		public Assignment getPrimitivePropertiesAssignment_2_2_1() { return cPrimitivePropertiesAssignment_2_2_1; }
		
		//PrimitiveProperties
		public RuleCall getPrimitivePropertiesPrimitivePropertiesParserRuleCall_2_2_1_0() { return cPrimitivePropertiesPrimitivePropertiesParserRuleCall_2_2_1_0; }
	}
	public class TypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.Types");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSTRINGAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cStringAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cStringAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cArrayAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cArrayAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_1_1_0 = (RuleCall)cArrayAssignment_1_1.eContents().get(0);
		private final Assignment cNumberAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNumberNumberParserRuleCall_2_0 = (RuleCall)cNumberAssignment_2.eContents().get(0);
		
		////ObjectRequireMinimumProperties:
		////	'require' (('minimum') | ('maximum')) INT 'properties' properties=hasProperties
		////;
		//Types:
		//	{STRING} string=STRING | {Array} array=Array | number=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//{STRING} string=STRING | {Array} array=Array | number=Number
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{STRING} string=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//{STRING}
		public Action getSTRINGAction_0_0() { return cSTRINGAction_0_0; }
		
		//string=STRING
		public Assignment getStringAssignment_0_1() { return cStringAssignment_0_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_0_1_0() { return cStringSTRINGTerminalRuleCall_0_1_0; }
		
		//{Array} array=Array
		public Group getGroup_1() { return cGroup_1; }
		
		//{Array}
		public Action getArrayAction_1_0() { return cArrayAction_1_0; }
		
		//array=Array
		public Assignment getArrayAssignment_1_1() { return cArrayAssignment_1_1; }
		
		//Array
		public RuleCall getArrayArrayParserRuleCall_1_1_0() { return cArrayArrayParserRuleCall_1_1_0; }
		
		//number=Number
		public Assignment getNumberAssignment_2() { return cNumberAssignment_2; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_2_0() { return cNumberNumberParserRuleCall_2_0; }
	}
	public class HasPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.hasProperties");
		private final Assignment cPropertiesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_0 = (RuleCall)cPropertiesAssignment.eContents().get(0);
		
		//hasProperties:
		//	properties+=Property*;
		@Override public ParserRule getRule() { return rule; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment() { return cPropertiesAssignment; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_0() { return cPropertiesPropertyParserRuleCall_0; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypesParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Property:
		//	type=Types name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Types name=ID
		public Group getGroup() { return cGroup; }
		
		//type=Types
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Types
		public RuleCall getTypeTypesParserRuleCall_0_0() { return cTypeTypesParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class PrimitivePropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.PrimitiveProperties");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLengthKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPatternKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cQuotationMarkKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFormatKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStringFormatAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStringFormatFormatTypesEnumRuleCall_2_1_0 = (RuleCall)cStringFormatAssignment_2_1.eContents().get(0);
		
		//PrimitiveProperties:
		//	'length' INT '-' INT | 'pattern' '"' STRING '"' | 'format' stringFormat=FormatTypes;
		@Override public ParserRule getRule() { return rule; }
		
		//'length' INT '-' INT | 'pattern' '"' STRING '"' | 'format' stringFormat=FormatTypes
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'length' INT '-' INT
		public Group getGroup_0() { return cGroup_0; }
		
		//'length'
		public Keyword getLengthKeyword_0_0() { return cLengthKeyword_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_2() { return cHyphenMinusKeyword_0_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_3() { return cINTTerminalRuleCall_0_3; }
		
		//'pattern' '"' STRING '"'
		public Group getGroup_1() { return cGroup_1; }
		
		//'pattern'
		public Keyword getPatternKeyword_1_0() { return cPatternKeyword_1_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_1_1() { return cQuotationMarkKeyword_1_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_2() { return cSTRINGTerminalRuleCall_1_2; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_1_3() { return cQuotationMarkKeyword_1_3; }
		
		//'format' stringFormat=FormatTypes
		public Group getGroup_2() { return cGroup_2; }
		
		//'format'
		public Keyword getFormatKeyword_2_0() { return cFormatKeyword_2_0; }
		
		//stringFormat=FormatTypes
		public Assignment getStringFormatAssignment_2_1() { return cStringFormatAssignment_2_1; }
		
		//FormatTypes
		public RuleCall getStringFormatFormatTypesEnumRuleCall_2_1_0() { return cStringFormatFormatTypesEnumRuleCall_2_1_0; }
	}
	public class IncludesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.Includes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjectIDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cObjectIDSTRINGTerminalRuleCall_0_0 = (RuleCall)cObjectIDAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cObjectIDAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cObjectIDSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cObjectIDAssignment_1_1.eContents().get(0);
		
		//Includes:
		//	objectID+=STRING (',' objectID+=STRING)*;
		@Override public ParserRule getRule() { return rule; }
		
		//objectID+=STRING (',' objectID+=STRING)*
		public Group getGroup() { return cGroup; }
		
		//objectID+=STRING
		public Assignment getObjectIDAssignment_0() { return cObjectIDAssignment_0; }
		
		//STRING
		public RuleCall getObjectIDSTRINGTerminalRuleCall_0_0() { return cObjectIDSTRINGTerminalRuleCall_0_0; }
		
		//(',' objectID+=STRING)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//objectID+=STRING
		public Assignment getObjectIDAssignment_1_1() { return cObjectIDAssignment_1_1; }
		
		//STRING
		public RuleCall getObjectIDSTRINGTerminalRuleCall_1_1_0() { return cObjectIDSTRINGTerminalRuleCall_1_1_0; }
	}
	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cPropertiesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_0_0 = (RuleCall)cPropertiesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_1_1_0 = (RuleCall)cPropertiesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////Types
		//Array:
		//	name=ID '[' (properties+=Property (',' properties+=Property)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '[' (properties+=Property (',' properties+=Property)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(properties+=Property (',' properties+=Property)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_2_0() { return cPropertiesAssignment_2_0; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_0_0() { return cPropertiesPropertyParserRuleCall_2_0_0; }
		
		//(',' properties+=Property)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_2_1_1() { return cPropertiesAssignment_2_1_1; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_1_1_0() { return cPropertiesPropertyParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	
	public class FormatTypesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.FormatTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDate_timeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDate_timeDateTimeKeyword_0_0 = (Keyword)cDate_timeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTimeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTimeTimeKeyword_1_0 = (Keyword)cTimeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDateDateKeyword_2_0 = (Keyword)cDateEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEmailEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEmailEmailKeyword_3_0 = (Keyword)cEmailEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cIdn_emailEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cIdn_emailIdnEmailKeyword_4_0 = (Keyword)cIdn_emailEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cHostnameEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cHostnameHostnameKeyword_5_0 = (Keyword)cHostnameEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cIpv4EnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cIpv4Ipv4Keyword_6_0 = (Keyword)cIpv4EnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cIpv6EnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cIpv6Ipv6Keyword_7_0 = (Keyword)cIpv6EnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cUriEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cUriUriKeyword_8_0 = (Keyword)cUriEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cUri_referenceEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cUri_referenceUriReferenceKeyword_9_0 = (Keyword)cUri_referenceEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cIriEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cIriIriKeyword_10_0 = (Keyword)cIriEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cIri_referenceEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cIri_referenceIriReferenceKeyword_11_0 = (Keyword)cIri_referenceEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cUri_templateEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cUri_templateUriTemplateKeyword_12_0 = (Keyword)cUri_templateEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cJson_pointerEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cJson_pointerJsonPointerKeyword_13_0 = (Keyword)cJson_pointerEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cRelative_json_pointerEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cRelative_json_pointerRelativeJsonPointerKeyword_14_0 = (Keyword)cRelative_json_pointerEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cRegexEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cRegexRegexKeyword_15_0 = (Keyword)cRegexEnumLiteralDeclaration_15.eContents().get(0);
		
		//enum FormatTypes:
		//	date_time='"date-time"' |
		//	time='"time"' |
		//	date='"date"' |
		//	email='"email"' |
		//	idn_email='"idn-email"' |
		//	hostname='"hostname"' |
		//	ipv4='"ipv4"' |
		//	ipv6='"ipv6"' |
		//	uri='"uri"' |
		//	uri_reference='"uri-reference"' |
		//	iri='"iri"' |
		//	iri_reference='"iri-reference"' |
		//	uri_template='"uri-template"' |
		//	json_pointer='"json-pointer"' |
		//	relative_json_pointer='"relative-json-pointer"' |
		//	regex='"regex"';
		public EnumRule getRule() { return rule; }
		
		//date_time='"date-time"' | time='"time"' | date='"date"' | email='"email"' | idn_email='"idn-email"' |
		//hostname='"hostname"' | ipv4='"ipv4"' | ipv6='"ipv6"' | uri='"uri"' | uri_reference='"uri-reference"' | iri='"iri"' |
		//iri_reference='"iri-reference"' | uri_template='"uri-template"' | json_pointer='"json-pointer"' |
		//relative_json_pointer='"relative-json-pointer"' | regex='"regex"'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//date_time='"date-time"'
		public EnumLiteralDeclaration getDate_timeEnumLiteralDeclaration_0() { return cDate_timeEnumLiteralDeclaration_0; }
		
		//'"date-time"'
		public Keyword getDate_timeDateTimeKeyword_0_0() { return cDate_timeDateTimeKeyword_0_0; }
		
		//time='"time"'
		public EnumLiteralDeclaration getTimeEnumLiteralDeclaration_1() { return cTimeEnumLiteralDeclaration_1; }
		
		//'"time"'
		public Keyword getTimeTimeKeyword_1_0() { return cTimeTimeKeyword_1_0; }
		
		//date='"date"'
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_2() { return cDateEnumLiteralDeclaration_2; }
		
		//'"date"'
		public Keyword getDateDateKeyword_2_0() { return cDateDateKeyword_2_0; }
		
		//email='"email"'
		public EnumLiteralDeclaration getEmailEnumLiteralDeclaration_3() { return cEmailEnumLiteralDeclaration_3; }
		
		//'"email"'
		public Keyword getEmailEmailKeyword_3_0() { return cEmailEmailKeyword_3_0; }
		
		//idn_email='"idn-email"'
		public EnumLiteralDeclaration getIdn_emailEnumLiteralDeclaration_4() { return cIdn_emailEnumLiteralDeclaration_4; }
		
		//'"idn-email"'
		public Keyword getIdn_emailIdnEmailKeyword_4_0() { return cIdn_emailIdnEmailKeyword_4_0; }
		
		//hostname='"hostname"'
		public EnumLiteralDeclaration getHostnameEnumLiteralDeclaration_5() { return cHostnameEnumLiteralDeclaration_5; }
		
		//'"hostname"'
		public Keyword getHostnameHostnameKeyword_5_0() { return cHostnameHostnameKeyword_5_0; }
		
		//ipv4='"ipv4"'
		public EnumLiteralDeclaration getIpv4EnumLiteralDeclaration_6() { return cIpv4EnumLiteralDeclaration_6; }
		
		//'"ipv4"'
		public Keyword getIpv4Ipv4Keyword_6_0() { return cIpv4Ipv4Keyword_6_0; }
		
		//ipv6='"ipv6"'
		public EnumLiteralDeclaration getIpv6EnumLiteralDeclaration_7() { return cIpv6EnumLiteralDeclaration_7; }
		
		//'"ipv6"'
		public Keyword getIpv6Ipv6Keyword_7_0() { return cIpv6Ipv6Keyword_7_0; }
		
		//uri='"uri"'
		public EnumLiteralDeclaration getUriEnumLiteralDeclaration_8() { return cUriEnumLiteralDeclaration_8; }
		
		//'"uri"'
		public Keyword getUriUriKeyword_8_0() { return cUriUriKeyword_8_0; }
		
		//uri_reference='"uri-reference"'
		public EnumLiteralDeclaration getUri_referenceEnumLiteralDeclaration_9() { return cUri_referenceEnumLiteralDeclaration_9; }
		
		//'"uri-reference"'
		public Keyword getUri_referenceUriReferenceKeyword_9_0() { return cUri_referenceUriReferenceKeyword_9_0; }
		
		//iri='"iri"'
		public EnumLiteralDeclaration getIriEnumLiteralDeclaration_10() { return cIriEnumLiteralDeclaration_10; }
		
		//'"iri"'
		public Keyword getIriIriKeyword_10_0() { return cIriIriKeyword_10_0; }
		
		//iri_reference='"iri-reference"'
		public EnumLiteralDeclaration getIri_referenceEnumLiteralDeclaration_11() { return cIri_referenceEnumLiteralDeclaration_11; }
		
		//'"iri-reference"'
		public Keyword getIri_referenceIriReferenceKeyword_11_0() { return cIri_referenceIriReferenceKeyword_11_0; }
		
		//uri_template='"uri-template"'
		public EnumLiteralDeclaration getUri_templateEnumLiteralDeclaration_12() { return cUri_templateEnumLiteralDeclaration_12; }
		
		//'"uri-template"'
		public Keyword getUri_templateUriTemplateKeyword_12_0() { return cUri_templateUriTemplateKeyword_12_0; }
		
		//json_pointer='"json-pointer"'
		public EnumLiteralDeclaration getJson_pointerEnumLiteralDeclaration_13() { return cJson_pointerEnumLiteralDeclaration_13; }
		
		//'"json-pointer"'
		public Keyword getJson_pointerJsonPointerKeyword_13_0() { return cJson_pointerJsonPointerKeyword_13_0; }
		
		//relative_json_pointer='"relative-json-pointer"'
		public EnumLiteralDeclaration getRelative_json_pointerEnumLiteralDeclaration_14() { return cRelative_json_pointerEnumLiteralDeclaration_14; }
		
		//'"relative-json-pointer"'
		public Keyword getRelative_json_pointerRelativeJsonPointerKeyword_14_0() { return cRelative_json_pointerRelativeJsonPointerKeyword_14_0; }
		
		//regex='"regex"'
		public EnumLiteralDeclaration getRegexEnumLiteralDeclaration_15() { return cRegexEnumLiteralDeclaration_15; }
		
		//'"regex"'
		public Keyword getRegexRegexKeyword_15_0() { return cRegexRegexKeyword_15_0; }
	}
	
	private final ModelElements pModel;
	private final NumberElements pNumber;
	private final ObjectElements pObject;
	private final PrimitiveObjectElements pPrimitiveObject;
	private final TypesElements pTypes;
	private final HasPropertiesElements pHasProperties;
	private final PropertyElements pProperty;
	private final PrimitivePropertiesElements pPrimitiveProperties;
	private final FormatTypesElements eFormatTypes;
	private final IncludesElements pIncludes;
	private final ArrayElements pArray;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JSchemaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pNumber = new NumberElements();
		this.pObject = new ObjectElements();
		this.pPrimitiveObject = new PrimitiveObjectElements();
		this.pTypes = new TypesElements();
		this.pHasProperties = new HasPropertiesElements();
		this.pProperty = new PropertyElements();
		this.pPrimitiveProperties = new PrimitivePropertiesElements();
		this.eFormatTypes = new FormatTypesElements();
		this.pIncludes = new IncludesElements();
		this.pArray = new ArrayElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.JSchema".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	Object | PrimitiveObject;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Number:
	//	number=INT ('.' decimal=INT)?;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	////(nestedObjectName=ID nestedObject=Object)
	//Object:
	//	name=ID ('includes' includeObjects=Includes)? '{' properties=hasProperties? '}';
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//PrimitiveObject:
	//	type=Types name=ID ('with' primitiveProperties+=PrimitiveProperties (','
	//	primitiveProperties+=PrimitiveProperties)*)?;
	public PrimitiveObjectElements getPrimitiveObjectAccess() {
		return pPrimitiveObject;
	}
	
	public ParserRule getPrimitiveObjectRule() {
		return getPrimitiveObjectAccess().getRule();
	}
	
	////ObjectRequireMinimumProperties:
	////	'require' (('minimum') | ('maximum')) INT 'properties' properties=hasProperties
	////;
	//Types:
	//	{STRING} string=STRING | {Array} array=Array | number=Number;
	public TypesElements getTypesAccess() {
		return pTypes;
	}
	
	public ParserRule getTypesRule() {
		return getTypesAccess().getRule();
	}
	
	//hasProperties:
	//	properties+=Property*;
	public HasPropertiesElements getHasPropertiesAccess() {
		return pHasProperties;
	}
	
	public ParserRule getHasPropertiesRule() {
		return getHasPropertiesAccess().getRule();
	}
	
	//Property:
	//	type=Types name=ID;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//PrimitiveProperties:
	//	'length' INT '-' INT | 'pattern' '"' STRING '"' | 'format' stringFormat=FormatTypes;
	public PrimitivePropertiesElements getPrimitivePropertiesAccess() {
		return pPrimitiveProperties;
	}
	
	public ParserRule getPrimitivePropertiesRule() {
		return getPrimitivePropertiesAccess().getRule();
	}
	
	//enum FormatTypes:
	//	date_time='"date-time"' |
	//	time='"time"' |
	//	date='"date"' |
	//	email='"email"' |
	//	idn_email='"idn-email"' |
	//	hostname='"hostname"' |
	//	ipv4='"ipv4"' |
	//	ipv6='"ipv6"' |
	//	uri='"uri"' |
	//	uri_reference='"uri-reference"' |
	//	iri='"iri"' |
	//	iri_reference='"iri-reference"' |
	//	uri_template='"uri-template"' |
	//	json_pointer='"json-pointer"' |
	//	relative_json_pointer='"relative-json-pointer"' |
	//	regex='"regex"';
	public FormatTypesElements getFormatTypesAccess() {
		return eFormatTypes;
	}
	
	public EnumRule getFormatTypesRule() {
		return getFormatTypesAccess().getRule();
	}
	
	//Includes:
	//	objectID+=STRING (',' objectID+=STRING)*;
	public IncludesElements getIncludesAccess() {
		return pIncludes;
	}
	
	public ParserRule getIncludesRule() {
		return getIncludesAccess().getRule();
	}
	
	////Types
	//Array:
	//	name=ID '[' (properties+=Property (',' properties+=Property)*)? ']';
	public ArrayElements getArrayAccess() {
		return pArray;
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
