/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JSchemaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.Model");
		private final Assignment cAbstractObjectAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAbstractObjectAbstractObjectParserRuleCall_0 = (RuleCall)cAbstractObjectAssignment.eContents().get(0);
		
		//Model:
		//	AbstractObject+=AbstractObject*;
		@Override public ParserRule getRule() { return rule; }
		
		//AbstractObject+=AbstractObject*
		public Assignment getAbstractObjectAssignment() { return cAbstractObjectAssignment; }
		
		//AbstractObject
		public RuleCall getAbstractObjectAbstractObjectParserRuleCall_0() { return cAbstractObjectAbstractObjectParserRuleCall_0; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumberINTTerminalRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDecimalAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDecimalINTTerminalRuleCall_1_1_0 = (RuleCall)cDecimalAssignment_1_1.eContents().get(0);
		
		//Number:
		//	number=INT ('.' decimal=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//number=INT ('.' decimal=INT)?
		public Group getGroup() { return cGroup; }
		
		//number=INT
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_0_0() { return cNumberINTTerminalRuleCall_0_0; }
		
		//('.' decimal=INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//decimal=INT
		public Assignment getDecimalAssignment_1_1() { return cDecimalAssignment_1_1; }
		
		//INT
		public RuleCall getDecimalINTTerminalRuleCall_1_1_0() { return cDecimalINTTerminalRuleCall_1_1_0; }
	}
	public class AbstractObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.AbstractObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMainObjectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveObjectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractObject:
		//	MainObject | PrimitiveObject;
		@Override public ParserRule getRule() { return rule; }
		
		//MainObject | PrimitiveObject
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MainObject
		public RuleCall getMainObjectParserRuleCall_0() { return cMainObjectParserRuleCall_0; }
		
		//PrimitiveObject
		public RuleCall getPrimitiveObjectParserRuleCall_1() { return cPrimitiveObjectParserRuleCall_1; }
	}
	public class MainObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.MainObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjectNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cObjectNameIDTerminalRuleCall_0_0 = (RuleCall)cObjectNameAssignment_0.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRootIsRootParserRuleCall_1_0 = (RuleCall)cRootAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIncludesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIncludeObjectsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIncludeObjectsIncludesParserRuleCall_2_1_0 = (RuleCall)cIncludeObjectsAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cPropertiesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cPropertiesHasPropertiesParserRuleCall_4_0_0 = (RuleCall)cPropertiesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cPropertiesHasPropertiesParserRuleCall_4_1_1_0 = (RuleCall)cPropertiesAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MainObject:
		//	objectName=ID root=IsRoot? ('includes' includeObjects=Includes)? '{' (properties+=hasProperties (','
		//	properties+=hasProperties)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//objectName=ID root=IsRoot? ('includes' includeObjects=Includes)? '{' (properties+=hasProperties (','
		//properties+=hasProperties)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//objectName=ID
		public Assignment getObjectNameAssignment_0() { return cObjectNameAssignment_0; }
		
		//ID
		public RuleCall getObjectNameIDTerminalRuleCall_0_0() { return cObjectNameIDTerminalRuleCall_0_0; }
		
		//root=IsRoot?
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }
		
		//IsRoot
		public RuleCall getRootIsRootParserRuleCall_1_0() { return cRootIsRootParserRuleCall_1_0; }
		
		//('includes' includeObjects=Includes)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'includes'
		public Keyword getIncludesKeyword_2_0() { return cIncludesKeyword_2_0; }
		
		//includeObjects=Includes
		public Assignment getIncludeObjectsAssignment_2_1() { return cIncludeObjectsAssignment_2_1; }
		
		//Includes
		public RuleCall getIncludeObjectsIncludesParserRuleCall_2_1_0() { return cIncludeObjectsIncludesParserRuleCall_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(properties+=hasProperties (',' properties+=hasProperties)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//properties+=hasProperties
		public Assignment getPropertiesAssignment_4_0() { return cPropertiesAssignment_4_0; }
		
		//hasProperties
		public RuleCall getPropertiesHasPropertiesParserRuleCall_4_0_0() { return cPropertiesHasPropertiesParserRuleCall_4_0_0; }
		
		//(',' properties+=hasProperties)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//properties+=hasProperties
		public Assignment getPropertiesAssignment_4_1_1() { return cPropertiesAssignment_4_1_1; }
		
		//hasProperties
		public RuleCall getPropertiesHasPropertiesParserRuleCall_4_1_1_0() { return cPropertiesHasPropertiesParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PrimitiveObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.PrimitiveObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypePrimitiveTypesParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWithKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPrimitivePropertiesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrimitivePropertiesPrimitivePropertiesParserRuleCall_1_1_0 = (RuleCall)cPrimitivePropertiesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cPrimitivePropertiesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cPrimitivePropertiesPrimitivePropertiesParserRuleCall_1_2_1_0 = (RuleCall)cPrimitivePropertiesAssignment_1_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//PrimitiveObject:
		//	type=PrimitiveTypes ('with' primitiveProperties+=PrimitiveProperties (',' primitiveProperties+=PrimitiveProperties)*
		//	';')?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=PrimitiveTypes ('with' primitiveProperties+=PrimitiveProperties (',' primitiveProperties+=PrimitiveProperties)*
		//';')?
		public Group getGroup() { return cGroup; }
		
		//type=PrimitiveTypes
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//PrimitiveTypes
		public RuleCall getTypePrimitiveTypesParserRuleCall_0_0() { return cTypePrimitiveTypesParserRuleCall_0_0; }
		
		//('with' primitiveProperties+=PrimitiveProperties (',' primitiveProperties+=PrimitiveProperties)* ';')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'with'
		public Keyword getWithKeyword_1_0() { return cWithKeyword_1_0; }
		
		//primitiveProperties+=PrimitiveProperties
		public Assignment getPrimitivePropertiesAssignment_1_1() { return cPrimitivePropertiesAssignment_1_1; }
		
		//PrimitiveProperties
		public RuleCall getPrimitivePropertiesPrimitivePropertiesParserRuleCall_1_1_0() { return cPrimitivePropertiesPrimitivePropertiesParserRuleCall_1_1_0; }
		
		//(',' primitiveProperties+=PrimitiveProperties)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//primitiveProperties+=PrimitiveProperties
		public Assignment getPrimitivePropertiesAssignment_1_2_1() { return cPrimitivePropertiesAssignment_1_2_1; }
		
		//PrimitiveProperties
		public RuleCall getPrimitivePropertiesPrimitivePropertiesParserRuleCall_1_2_1_0() { return cPrimitivePropertiesPrimitivePropertiesParserRuleCall_1_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }
	}
	public class PrimitiveTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.PrimitiveTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cStringAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cStringAssignment_0_1.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cNumKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNumberAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNumberNumberParserRuleCall_2_1_0 = (RuleCall)cNumberAssignment_2_1.eContents().get(0);
		
		//PrimitiveTypes:
		//	'String' string=STRING | array=Array | 'num' number=Number?;
		@Override public ParserRule getRule() { return rule; }
		
		//'String' string=STRING | array=Array | 'num' number=Number?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'String' string=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//'String'
		public Keyword getStringKeyword_0_0() { return cStringKeyword_0_0; }
		
		//string=STRING
		public Assignment getStringAssignment_0_1() { return cStringAssignment_0_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_0_1_0() { return cStringSTRINGTerminalRuleCall_0_1_0; }
		
		//array=Array
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//Array
		public RuleCall getArrayArrayParserRuleCall_1_0() { return cArrayArrayParserRuleCall_1_0; }
		
		//'num' number=Number?
		public Group getGroup_2() { return cGroup_2; }
		
		//'num'
		public Keyword getNumKeyword_2_0() { return cNumKeyword_2_0; }
		
		//number=Number?
		public Assignment getNumberAssignment_2_1() { return cNumberAssignment_2_1; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_2_1_0() { return cNumberNumberParserRuleCall_2_1_0; }
	}
	public class IsRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.IsRoot");
		private final Assignment cStringAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cStringRootKeyword_0 = (Keyword)cStringAssignment.eContents().get(0);
		
		//IsRoot:
		//	string='root';
		@Override public ParserRule getRule() { return rule; }
		
		//string='root'
		public Assignment getStringAssignment() { return cStringAssignment; }
		
		//'root'
		public Keyword getStringRootKeyword_0() { return cStringRootKeyword_0; }
	}
	public class HasPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.hasProperties");
		private final Assignment cPropertiesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_0 = (RuleCall)cPropertiesAssignment.eContents().get(0);
		
		//hasProperties:
		//	properties=Property;
		@Override public ParserRule getRule() { return rule; }
		
		//properties=Property
		public Assignment getPropertiesAssignment() { return cPropertiesAssignment; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_0() { return cPropertiesPropertyParserRuleCall_0; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPropPrimAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPropPrimPrimitiveObjectParserRuleCall_0_0 = (RuleCall)cPropPrimAssignment_0.eContents().get(0);
		private final Assignment cPropObjAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPropObjMainObjectParserRuleCall_1_0 = (RuleCall)cPropObjAssignment_1.eContents().get(0);
		
		//Property:
		//	propPrim=PrimitiveObject | propObj=MainObject;
		@Override public ParserRule getRule() { return rule; }
		
		//propPrim=PrimitiveObject | propObj=MainObject
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//propPrim=PrimitiveObject
		public Assignment getPropPrimAssignment_0() { return cPropPrimAssignment_0; }
		
		//PrimitiveObject
		public RuleCall getPropPrimPrimitiveObjectParserRuleCall_0_0() { return cPropPrimPrimitiveObjectParserRuleCall_0_0; }
		
		//propObj=MainObject
		public Assignment getPropObjAssignment_1() { return cPropObjAssignment_1; }
		
		//MainObject
		public RuleCall getPropObjMainObjectParserRuleCall_1_0() { return cPropObjMainObjectParserRuleCall_1_0; }
	}
	public class PrimitivePropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.PrimitiveProperties");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLengthKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cStringLengthAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cStringLengthStringLengthParserRuleCall_0_1_0 = (RuleCall)cStringLengthAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPatternKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPatternStringAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPatternStringSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cPatternStringAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFormatKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStringFormatAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStringFormatFormatTypesEnumRuleCall_2_1_0 = (RuleCall)cStringFormatAssignment_2_1.eContents().get(0);
		
		//PrimitiveProperties:
		//	'length' stringLength=StringLength | 'pattern' patternString=STRING | 'format' stringFormat=FormatTypes;
		@Override public ParserRule getRule() { return rule; }
		
		//'length' stringLength=StringLength | 'pattern' patternString=STRING | 'format' stringFormat=FormatTypes
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'length' stringLength=StringLength
		public Group getGroup_0() { return cGroup_0; }
		
		//'length'
		public Keyword getLengthKeyword_0_0() { return cLengthKeyword_0_0; }
		
		//stringLength=StringLength
		public Assignment getStringLengthAssignment_0_1() { return cStringLengthAssignment_0_1; }
		
		//StringLength
		public RuleCall getStringLengthStringLengthParserRuleCall_0_1_0() { return cStringLengthStringLengthParserRuleCall_0_1_0; }
		
		//'pattern' patternString=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//'pattern'
		public Keyword getPatternKeyword_1_0() { return cPatternKeyword_1_0; }
		
		//patternString=STRING
		public Assignment getPatternStringAssignment_1_1() { return cPatternStringAssignment_1_1; }
		
		//STRING
		public RuleCall getPatternStringSTRINGTerminalRuleCall_1_1_0() { return cPatternStringSTRINGTerminalRuleCall_1_1_0; }
		
		//'format' stringFormat=FormatTypes
		public Group getGroup_2() { return cGroup_2; }
		
		//'format'
		public Keyword getFormatKeyword_2_0() { return cFormatKeyword_2_0; }
		
		//stringFormat=FormatTypes
		public Assignment getStringFormatAssignment_2_1() { return cStringFormatAssignment_2_1; }
		
		//FormatTypes
		public RuleCall getStringFormatFormatTypesEnumRuleCall_2_1_0() { return cStringFormatFormatTypesEnumRuleCall_2_1_0; }
	}
	public class StringLengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.StringLength");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//StringLength:
		//	INT '-' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '-' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class IncludesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.Includes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjectIDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cObjectIDSTRINGTerminalRuleCall_0_0 = (RuleCall)cObjectIDAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cObjectIDAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cObjectIDSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cObjectIDAssignment_1_1.eContents().get(0);
		
		//Includes:
		//	objectID+=STRING (',' objectID+=STRING)*;
		@Override public ParserRule getRule() { return rule; }
		
		//objectID+=STRING (',' objectID+=STRING)*
		public Group getGroup() { return cGroup; }
		
		//objectID+=STRING
		public Assignment getObjectIDAssignment_0() { return cObjectIDAssignment_0; }
		
		//STRING
		public RuleCall getObjectIDSTRINGTerminalRuleCall_0_0() { return cObjectIDSTRINGTerminalRuleCall_0_0; }
		
		//(',' objectID+=STRING)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//objectID+=STRING
		public Assignment getObjectIDAssignment_1_1() { return cObjectIDAssignment_1_1; }
		
		//STRING
		public RuleCall getObjectIDSTRINGTerminalRuleCall_1_1_0() { return cObjectIDSTRINGTerminalRuleCall_1_1_0; }
	}
	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArrayNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArrayNameIDTerminalRuleCall_0_0 = (RuleCall)cArrayNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cPropertiesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_0_0 = (RuleCall)cPropertiesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_1_1_0 = (RuleCall)cPropertiesAssignment_2_1_1.eContents().get(0);
		private final Assignment cArrayTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArrayTypeArrayTypeParserRuleCall_3_0 = (RuleCall)cArrayTypeAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Array:
		//	arrayName=ID '[' (properties+=Property (',' properties+=Property)*)? arrayType=ArrayType? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//arrayName=ID '[' (properties+=Property (',' properties+=Property)*)? arrayType=ArrayType? ']'
		public Group getGroup() { return cGroup; }
		
		//arrayName=ID
		public Assignment getArrayNameAssignment_0() { return cArrayNameAssignment_0; }
		
		//ID
		public RuleCall getArrayNameIDTerminalRuleCall_0_0() { return cArrayNameIDTerminalRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(properties+=Property (',' properties+=Property)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_2_0() { return cPropertiesAssignment_2_0; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_0_0() { return cPropertiesPropertyParserRuleCall_2_0_0; }
		
		//(',' properties+=Property)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_2_1_1() { return cPropertiesAssignment_2_1_1; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_1_1_0() { return cPropertiesPropertyParserRuleCall_2_1_1_0; }
		
		//arrayType=ArrayType?
		public Assignment getArrayTypeAssignment_3() { return cArrayTypeAssignment_3; }
		
		//ArrayType
		public RuleCall getArrayTypeArrayTypeParserRuleCall_3_0() { return cArrayTypeArrayTypeParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.ArrayType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFloatKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDoubleKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//ArrayType:
		//	'string' | 'integer' | 'float' | 'double';
		@Override public ParserRule getRule() { return rule; }
		
		//'string' | 'integer' | 'float' | 'double'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'string'
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//'integer'
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
		
		//'float'
		public Keyword getFloatKeyword_2() { return cFloatKeyword_2; }
		
		//'double'
		public Keyword getDoubleKeyword_3() { return cDoubleKeyword_3; }
	}
	
	public class FormatTypesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.JSchema.FormatTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDefaultEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDefaultNullKeyword_0_0 = (Keyword)cDefaultEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDate_timeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDate_timeDateTimeKeyword_1_0 = (Keyword)cDate_timeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTimeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTimeTimeKeyword_2_0 = (Keyword)cTimeEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDateDateKeyword_3_0 = (Keyword)cDateEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEmailEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEmailEmailKeyword_4_0 = (Keyword)cEmailEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cIdn_emailEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cIdn_emailIdnEmailKeyword_5_0 = (Keyword)cIdn_emailEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cHostnameEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cHostnameHostnameKeyword_6_0 = (Keyword)cHostnameEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cIpv4EnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cIpv4Ipv4Keyword_7_0 = (Keyword)cIpv4EnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cIpv6EnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cIpv6Ipv6Keyword_8_0 = (Keyword)cIpv6EnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cUriEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cUriUriKeyword_9_0 = (Keyword)cUriEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cUri_referenceEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cUri_referenceUriReferenceKeyword_10_0 = (Keyword)cUri_referenceEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cIriEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cIriIriKeyword_11_0 = (Keyword)cIriEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cIri_referenceEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cIri_referenceIriReferenceKeyword_12_0 = (Keyword)cIri_referenceEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cUri_templateEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cUri_templateUriTemplateKeyword_13_0 = (Keyword)cUri_templateEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cJson_pointerEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cJson_pointerJsonPointerKeyword_14_0 = (Keyword)cJson_pointerEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cRelative_json_pointerEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cRelative_json_pointerRelativeJsonPointerKeyword_15_0 = (Keyword)cRelative_json_pointerEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cRegexEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cRegexRegexKeyword_16_0 = (Keyword)cRegexEnumLiteralDeclaration_16.eContents().get(0);
		
		//enum FormatTypes:
		//	default='null' |
		//	date_time='date-time' |
		//	time |
		//	date |
		//	email |
		//	idn_email='idn-email' |
		//	hostname |
		//	ipv4 |
		//	ipv6 |
		//	uri |
		//	uri_reference='uri-reference' |
		//	iri |
		//	iri_reference='iri-reference' |
		//	uri_template='uri-template' |
		//	json_pointer='json-pointer' |
		//	relative_json_pointer='relative-json-pointer' |
		//	regex;
		public EnumRule getRule() { return rule; }
		
		//default='null' | date_time='date-time' | time | date | email | idn_email='idn-email' | hostname | ipv4 | ipv6 | uri |
		//uri_reference='uri-reference' | iri | iri_reference='iri-reference' | uri_template='uri-template' |
		//json_pointer='json-pointer' | relative_json_pointer='relative-json-pointer' | regex
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//default='null'
		public EnumLiteralDeclaration getDefaultEnumLiteralDeclaration_0() { return cDefaultEnumLiteralDeclaration_0; }
		
		//'null'
		public Keyword getDefaultNullKeyword_0_0() { return cDefaultNullKeyword_0_0; }
		
		//date_time='date-time'
		public EnumLiteralDeclaration getDate_timeEnumLiteralDeclaration_1() { return cDate_timeEnumLiteralDeclaration_1; }
		
		//'date-time'
		public Keyword getDate_timeDateTimeKeyword_1_0() { return cDate_timeDateTimeKeyword_1_0; }
		
		//time
		public EnumLiteralDeclaration getTimeEnumLiteralDeclaration_2() { return cTimeEnumLiteralDeclaration_2; }
		
		//'time'
		public Keyword getTimeTimeKeyword_2_0() { return cTimeTimeKeyword_2_0; }
		
		//date
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_3() { return cDateEnumLiteralDeclaration_3; }
		
		//'date'
		public Keyword getDateDateKeyword_3_0() { return cDateDateKeyword_3_0; }
		
		//email
		public EnumLiteralDeclaration getEmailEnumLiteralDeclaration_4() { return cEmailEnumLiteralDeclaration_4; }
		
		//'email'
		public Keyword getEmailEmailKeyword_4_0() { return cEmailEmailKeyword_4_0; }
		
		//idn_email='idn-email'
		public EnumLiteralDeclaration getIdn_emailEnumLiteralDeclaration_5() { return cIdn_emailEnumLiteralDeclaration_5; }
		
		//'idn-email'
		public Keyword getIdn_emailIdnEmailKeyword_5_0() { return cIdn_emailIdnEmailKeyword_5_0; }
		
		//hostname
		public EnumLiteralDeclaration getHostnameEnumLiteralDeclaration_6() { return cHostnameEnumLiteralDeclaration_6; }
		
		//'hostname'
		public Keyword getHostnameHostnameKeyword_6_0() { return cHostnameHostnameKeyword_6_0; }
		
		//ipv4
		public EnumLiteralDeclaration getIpv4EnumLiteralDeclaration_7() { return cIpv4EnumLiteralDeclaration_7; }
		
		//'ipv4'
		public Keyword getIpv4Ipv4Keyword_7_0() { return cIpv4Ipv4Keyword_7_0; }
		
		//ipv6
		public EnumLiteralDeclaration getIpv6EnumLiteralDeclaration_8() { return cIpv6EnumLiteralDeclaration_8; }
		
		//'ipv6'
		public Keyword getIpv6Ipv6Keyword_8_0() { return cIpv6Ipv6Keyword_8_0; }
		
		//uri
		public EnumLiteralDeclaration getUriEnumLiteralDeclaration_9() { return cUriEnumLiteralDeclaration_9; }
		
		//'uri'
		public Keyword getUriUriKeyword_9_0() { return cUriUriKeyword_9_0; }
		
		//uri_reference='uri-reference'
		public EnumLiteralDeclaration getUri_referenceEnumLiteralDeclaration_10() { return cUri_referenceEnumLiteralDeclaration_10; }
		
		//'uri-reference'
		public Keyword getUri_referenceUriReferenceKeyword_10_0() { return cUri_referenceUriReferenceKeyword_10_0; }
		
		//iri
		public EnumLiteralDeclaration getIriEnumLiteralDeclaration_11() { return cIriEnumLiteralDeclaration_11; }
		
		//'iri'
		public Keyword getIriIriKeyword_11_0() { return cIriIriKeyword_11_0; }
		
		//iri_reference='iri-reference'
		public EnumLiteralDeclaration getIri_referenceEnumLiteralDeclaration_12() { return cIri_referenceEnumLiteralDeclaration_12; }
		
		//'iri-reference'
		public Keyword getIri_referenceIriReferenceKeyword_12_0() { return cIri_referenceIriReferenceKeyword_12_0; }
		
		//uri_template='uri-template'
		public EnumLiteralDeclaration getUri_templateEnumLiteralDeclaration_13() { return cUri_templateEnumLiteralDeclaration_13; }
		
		//'uri-template'
		public Keyword getUri_templateUriTemplateKeyword_13_0() { return cUri_templateUriTemplateKeyword_13_0; }
		
		//json_pointer='json-pointer'
		public EnumLiteralDeclaration getJson_pointerEnumLiteralDeclaration_14() { return cJson_pointerEnumLiteralDeclaration_14; }
		
		//'json-pointer'
		public Keyword getJson_pointerJsonPointerKeyword_14_0() { return cJson_pointerJsonPointerKeyword_14_0; }
		
		//relative_json_pointer='relative-json-pointer'
		public EnumLiteralDeclaration getRelative_json_pointerEnumLiteralDeclaration_15() { return cRelative_json_pointerEnumLiteralDeclaration_15; }
		
		//'relative-json-pointer'
		public Keyword getRelative_json_pointerRelativeJsonPointerKeyword_15_0() { return cRelative_json_pointerRelativeJsonPointerKeyword_15_0; }
		
		//regex
		public EnumLiteralDeclaration getRegexEnumLiteralDeclaration_16() { return cRegexEnumLiteralDeclaration_16; }
		
		//'regex'
		public Keyword getRegexRegexKeyword_16_0() { return cRegexRegexKeyword_16_0; }
	}
	
	private final ModelElements pModel;
	private final NumberElements pNumber;
	private final AbstractObjectElements pAbstractObject;
	private final MainObjectElements pMainObject;
	private final PrimitiveObjectElements pPrimitiveObject;
	private final PrimitiveTypesElements pPrimitiveTypes;
	private final IsRootElements pIsRoot;
	private final HasPropertiesElements pHasProperties;
	private final PropertyElements pProperty;
	private final PrimitivePropertiesElements pPrimitiveProperties;
	private final StringLengthElements pStringLength;
	private final FormatTypesElements eFormatTypes;
	private final IncludesElements pIncludes;
	private final ArrayElements pArray;
	private final ArrayTypeElements pArrayType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JSchemaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pNumber = new NumberElements();
		this.pAbstractObject = new AbstractObjectElements();
		this.pMainObject = new MainObjectElements();
		this.pPrimitiveObject = new PrimitiveObjectElements();
		this.pPrimitiveTypes = new PrimitiveTypesElements();
		this.pIsRoot = new IsRootElements();
		this.pHasProperties = new HasPropertiesElements();
		this.pProperty = new PropertyElements();
		this.pPrimitiveProperties = new PrimitivePropertiesElements();
		this.pStringLength = new StringLengthElements();
		this.eFormatTypes = new FormatTypesElements();
		this.pIncludes = new IncludesElements();
		this.pArray = new ArrayElements();
		this.pArrayType = new ArrayTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.JSchema".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	AbstractObject+=AbstractObject*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Number:
	//	number=INT ('.' decimal=INT)?;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//AbstractObject:
	//	MainObject | PrimitiveObject;
	public AbstractObjectElements getAbstractObjectAccess() {
		return pAbstractObject;
	}
	
	public ParserRule getAbstractObjectRule() {
		return getAbstractObjectAccess().getRule();
	}
	
	//MainObject:
	//	objectName=ID root=IsRoot? ('includes' includeObjects=Includes)? '{' (properties+=hasProperties (','
	//	properties+=hasProperties)*)? '}';
	public MainObjectElements getMainObjectAccess() {
		return pMainObject;
	}
	
	public ParserRule getMainObjectRule() {
		return getMainObjectAccess().getRule();
	}
	
	//PrimitiveObject:
	//	type=PrimitiveTypes ('with' primitiveProperties+=PrimitiveProperties (',' primitiveProperties+=PrimitiveProperties)*
	//	';')?;
	public PrimitiveObjectElements getPrimitiveObjectAccess() {
		return pPrimitiveObject;
	}
	
	public ParserRule getPrimitiveObjectRule() {
		return getPrimitiveObjectAccess().getRule();
	}
	
	//PrimitiveTypes:
	//	'String' string=STRING | array=Array | 'num' number=Number?;
	public PrimitiveTypesElements getPrimitiveTypesAccess() {
		return pPrimitiveTypes;
	}
	
	public ParserRule getPrimitiveTypesRule() {
		return getPrimitiveTypesAccess().getRule();
	}
	
	//IsRoot:
	//	string='root';
	public IsRootElements getIsRootAccess() {
		return pIsRoot;
	}
	
	public ParserRule getIsRootRule() {
		return getIsRootAccess().getRule();
	}
	
	//hasProperties:
	//	properties=Property;
	public HasPropertiesElements getHasPropertiesAccess() {
		return pHasProperties;
	}
	
	public ParserRule getHasPropertiesRule() {
		return getHasPropertiesAccess().getRule();
	}
	
	//Property:
	//	propPrim=PrimitiveObject | propObj=MainObject;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//PrimitiveProperties:
	//	'length' stringLength=StringLength | 'pattern' patternString=STRING | 'format' stringFormat=FormatTypes;
	public PrimitivePropertiesElements getPrimitivePropertiesAccess() {
		return pPrimitiveProperties;
	}
	
	public ParserRule getPrimitivePropertiesRule() {
		return getPrimitivePropertiesAccess().getRule();
	}
	
	//StringLength:
	//	INT '-' INT;
	public StringLengthElements getStringLengthAccess() {
		return pStringLength;
	}
	
	public ParserRule getStringLengthRule() {
		return getStringLengthAccess().getRule();
	}
	
	//enum FormatTypes:
	//	default='null' |
	//	date_time='date-time' |
	//	time |
	//	date |
	//	email |
	//	idn_email='idn-email' |
	//	hostname |
	//	ipv4 |
	//	ipv6 |
	//	uri |
	//	uri_reference='uri-reference' |
	//	iri |
	//	iri_reference='iri-reference' |
	//	uri_template='uri-template' |
	//	json_pointer='json-pointer' |
	//	relative_json_pointer='relative-json-pointer' |
	//	regex;
	public FormatTypesElements getFormatTypesAccess() {
		return eFormatTypes;
	}
	
	public EnumRule getFormatTypesRule() {
		return getFormatTypesAccess().getRule();
	}
	
	//Includes:
	//	objectID+=STRING (',' objectID+=STRING)*;
	public IncludesElements getIncludesAccess() {
		return pIncludes;
	}
	
	public ParserRule getIncludesRule() {
		return getIncludesAccess().getRule();
	}
	
	//Array:
	//	arrayName=ID '[' (properties+=Property (',' properties+=Property)*)? arrayType=ArrayType? ']';
	public ArrayElements getArrayAccess() {
		return pArray;
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}
	
	//ArrayType:
	//	'string' | 'integer' | 'float' | 'double';
	public ArrayTypeElements getArrayTypeAccess() {
		return pArrayType;
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
