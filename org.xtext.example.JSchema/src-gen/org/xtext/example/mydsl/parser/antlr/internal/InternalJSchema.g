/*
 * generated by Xtext 2.21.0
 */
grammar InternalJSchema;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.JSchemaGrammarAccess;

}

@parser::members {

 	private JSchemaGrammarAccess grammarAccess;

    public InternalJSchemaParser(TokenStream input, JSchemaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected JSchemaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getModelAccess().getObjectParserRuleCall());
	}
	this_Object_0=ruleObject
	{
		$current = $this_Object_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleNumber
entryRuleNumber returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_ruleNumber=ruleNumber
	{ $current=$iv_ruleNumber.current; }
	EOF;

// Rule Number
ruleNumber returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='num'
			{
				newLeafNode(otherlv_0, grammarAccess.getNumberAccess().getNumKeyword_0_0());
			}
			(
				(
					lv_value_1_0=RULE_INT
					{
						newLeafNode(lv_value_1_0, grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNumberRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		this_DOUBLE_2=RULE_DOUBLE
		{
			newLeafNode(this_DOUBLE_2, grammarAccess.getNumberAccess().getDOUBLETerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleObject
entryRuleObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectRule()); }
	iv_ruleObject=ruleObject
	{ $current=$iv_ruleObject.current; }
	EOF;

// Rule Object
ruleObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='object'
		{
			newLeafNode(otherlv_0, grammarAccess.getObjectAccess().getObjectKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getObjectAccess().getObjectRequireMinimumPropertiesParserRuleCall_1());
			}
			this_ObjectRequireMinimumProperties_1=ruleObjectRequireMinimumProperties
			{
				$current = $this_ObjectRequireMinimumProperties_1.current;
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleObjectRequireMinimumProperties
entryRuleObjectRequireMinimumProperties returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectRequireMinimumPropertiesRule()); }
	iv_ruleObjectRequireMinimumProperties=ruleObjectRequireMinimumProperties
	{ $current=$iv_ruleObjectRequireMinimumProperties.current; }
	EOF;

// Rule ObjectRequireMinimumProperties
ruleObjectRequireMinimumProperties returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='require'
		{
			newLeafNode(otherlv_0, grammarAccess.getObjectRequireMinimumPropertiesAccess().getRequireKeyword_0());
		}
		(
			otherlv_1='minimum'
			{
				newLeafNode(otherlv_1, grammarAccess.getObjectRequireMinimumPropertiesAccess().getMinimumKeyword_1_0());
			}
			    |
			otherlv_2='maximum'
			{
				newLeafNode(otherlv_2, grammarAccess.getObjectRequireMinimumPropertiesAccess().getMaximumKeyword_1_1());
			}
		)
		{
			newCompositeNode(grammarAccess.getObjectRequireMinimumPropertiesAccess().getNumberParserRuleCall_2());
		}
		this_Number_3=ruleNumber
		{
			$current = $this_Number_3.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_4='properties'
		{
			newLeafNode(otherlv_4, grammarAccess.getObjectRequireMinimumPropertiesAccess().getPropertiesKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectRequireMinimumPropertiesAccess().getPropertiesPropertiesParserRuleCall_4_0());
				}
				lv_properties_5_0=ruleProperties
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectRequireMinimumPropertiesRule());
					}
					set(
						$current,
						"properties",
						lv_properties_5_0,
						"org.xtext.example.mydsl.JSchema.Properties");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTypes
entryRuleTypes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypesRule()); }
	iv_ruleTypes=ruleTypes
	{ $current=$iv_ruleTypes.current; }
	EOF;

// Rule Types
ruleTypes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypesAccess().getObjectAction_0_0(),
						$current);
				}
			)
			otherlv_1='object'
			{
				newLeafNode(otherlv_1, grammarAccess.getTypesAccess().getObjectKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypesAccess().getSTRINGAction_1_0(),
						$current);
				}
			)
			otherlv_3='string'
			{
				newLeafNode(otherlv_3, grammarAccess.getTypesAccess().getStringKeyword_1_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypesAccess().getNumberAction_2_0(),
						$current);
				}
			)
			otherlv_5='number'
			{
				newLeafNode(otherlv_5, grammarAccess.getTypesAccess().getNumberKeyword_2_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypesAccess().getArrayAction_3_0(),
						$current);
				}
			)
			otherlv_7='array'
			{
				newLeafNode(otherlv_7, grammarAccess.getTypesAccess().getArrayKeyword_3_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypesAccess().getBooleanAction_4_0(),
						$current);
				}
			)
			otherlv_9='boolean'
			{
				newLeafNode(otherlv_9, grammarAccess.getTypesAccess().getBooleanKeyword_4_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypesAccess().getNullAction_5_0(),
						$current);
				}
			)
			otherlv_11='null'
			{
				newLeafNode(otherlv_11, grammarAccess.getTypesAccess().getNullKeyword_5_1());
			}
		)
	)
;

// Entry rule entryRuleProperties
entryRuleProperties returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertiesRule()); }
	iv_ruleProperties=ruleProperties
	{ $current=$iv_ruleProperties.current; }
	EOF;

// Rule Properties
ruleProperties returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPropertiesAccess().getPropertiesAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertiesAccess().getPropertiesPropertyParserRuleCall_1_0());
				}
				lv_properties_1_0=ruleProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertiesRule());
					}
					add(
						$current,
						"properties",
						lv_properties_1_0,
						"org.xtext.example.mydsl.JSchema.Property");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	iv_ruleProperty=ruleProperty
	{ $current=$iv_ruleProperty.current; }
	EOF;

// Rule Property
ruleProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='name'
		{
			newLeafNode(otherlv_0, grammarAccess.getPropertyAccess().getNameKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='type'
		{
			newLeafNode(otherlv_2, grammarAccess.getPropertyAccess().getTypeKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyAccess().getTypeTypesParserRuleCall_3_0());
				}
				lv_type_3_0=ruleTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"org.xtext.example.mydsl.JSchema.Types");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_BOOLEAN : ('true'|'false');

RULE_DOUBLE : RULE_INT ('.' RULE_INT+)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
