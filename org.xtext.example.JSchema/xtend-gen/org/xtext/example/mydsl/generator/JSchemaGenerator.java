/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterators;
import java.util.ArrayList;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl.generator.FileController;
import org.xtext.example.mydsl.generator.JsonFormatter;
import org.xtext.example.mydsl.generator.ObjectClass;
import org.xtext.example.mydsl.generator.PrimitiveObjectClass;
import org.xtext.example.mydsl.jSchema.AbstractObject;
import org.xtext.example.mydsl.jSchema.Array;
import org.xtext.example.mydsl.jSchema.Extends;
import org.xtext.example.mydsl.jSchema.FormatTypes;
import org.xtext.example.mydsl.jSchema.MainObject;
import org.xtext.example.mydsl.jSchema.Model;
import org.xtext.example.mydsl.jSchema.PrimitiveObject;
import org.xtext.example.mydsl.jSchema.PrimitiveProperties;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class JSchemaGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  private ArrayList<PrimitiveObject> primitiveObjectList;
  
  private ArrayList<MainObject> mainObjectList;
  
  private ArrayList<ObjectClass> compiledMainObjects;
  
  private ArrayList<PrimitiveObjectClass> compiledPrimitiveObjects;
  
  private FileController fileController;
  
  private JsonFormatter jsonFormatter;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Model model = Iterators.<Model>filter(resource.getAllContents(), Model.class).next();
    JsonFormatter _jsonFormatter = new JsonFormatter();
    this.jsonFormatter = _jsonFormatter;
    this.constructSchema(model, fsa);
    int _size = this.primitiveObjectList.size();
    String _plus = ("Amount of primitive objects found: " + Integer.valueOf(_size));
    System.out.println(_plus);
  }
  
  public void constructSchema(final Model rootModel, final IFileSystemAccess2 fsa) {
    int counter = 0;
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    {
      EList<AbstractObject> _abstractObject = rootModel.getAbstractObject();
      for(final AbstractObject mod : _abstractObject) {
        {
          if ((mod instanceof MainObject)) {
            int _size = rootModel.getAbstractObject().size();
            String _plus = ("Rootmodel objectSize: " + Integer.valueOf(_size));
            String _plus_1 = (_plus + "counter: ");
            String _plus_2 = (_plus_1 + Integer.valueOf(counter));
            System.out.println(_plus_2);
            _builder.newLineIfNotEmpty();
            int _size_1 = rootModel.getAbstractObject().size();
            int _plusPlus = counter++;
            boolean _equals = (_size_1 == _plusPlus);
            CharSequence _generateMainObject = this.generateMainObject(((MainObject)mod), _equals);
            _builder.append(_generateMainObject);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((mod instanceof PrimitiveObject)) {
            int _size_2 = rootModel.getAbstractObject().size();
            int _plusPlus_1 = counter++;
            boolean _equals_1 = (_size_2 == _plusPlus_1);
            CharSequence _generatePrimitiveObject = this.generatePrimitiveObject(((PrimitiveObject)mod), _equals_1);
            _builder.append(_generatePrimitiveObject);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    fsa.generateFile("newGenFile.json", _builder);
  }
  
  public String generatePrimitiveStringObject(final PrimitiveObject primitiveObject, final String objName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"");
    _builder.append(objName);
    _builder.append("\" : {");
    _builder.newLineIfNotEmpty();
    _builder.append("\"type\": \"string\"");
    _builder.newLine();
    _builder.newLine();
    {
      EList<PrimitiveProperties> _primitiveProperties = primitiveObject.getPrimitiveProperties();
      for(final PrimitiveProperties prop : _primitiveProperties) {
        {
          FormatTypes _stringFormat = prop.getStringFormat();
          boolean _tripleNotEquals = (_stringFormat != FormatTypes.DEFAULT);
          if (_tripleNotEquals) {
            _builder.append(",");
            _builder.newLine();
            _builder.append("\"format\": \"");
            String _string = prop.getStringFormat().getName().toString();
            _builder.append(_string);
            _builder.append("\"");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _stringLength = prop.getStringLength();
          boolean _tripleNotEquals_1 = (_stringLength != null);
          if (_tripleNotEquals_1) {
            _builder.append(",");
            _builder.newLine();
            _builder.append("\"minLength\": ");
            String _get = prop.getStringLength().split("-")[0];
            _builder.append(_get);
            _builder.append(",");
            _builder.newLineIfNotEmpty();
            _builder.append("\"maxLength\": ");
            String _get_1 = prop.getStringLength().split("-")[1];
            _builder.append(_get_1);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _patternString = prop.getPatternString();
          boolean _tripleNotEquals_2 = (_patternString != null);
          if (_tripleNotEquals_2) {
            _builder.append(",");
            _builder.newLine();
            _builder.append("\"pattern\": \"");
            String _patternString_1 = prop.getPatternString();
            _builder.append(_patternString_1);
            _builder.append("\"");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public CharSequence generateExtendsObjects(final MainObject model) {
    CharSequence _xblockexpression = null;
    {
      int counter = 0;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\"allOf:\" [");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("{");
      _builder.newLine();
      {
        if (((model.getInherits() instanceof Extends) && (!((Extends) model.getInherits()).getExtends().isEmpty()))) {
          _builder.append("\t\t\t");
          EObject _inherits = model.getInherits();
          final EList<AbstractObject> extensions = ((Extends) _inherits).getExtends();
          _builder.newLineIfNotEmpty();
          {
            for(final AbstractObject extended : extensions) {
              {
                if ((extended instanceof PrimitiveObject)) {
                  {
                    String _name = ((PrimitiveObject)extended).getType().getName();
                    boolean _tripleNotEquals = (_name != null);
                    if (_tripleNotEquals) {
                      _builder.append("\t\t\t");
                      int _size = extensions.size();
                      int _plusPlus = counter++;
                      boolean _equals = (_size == _plusPlus);
                      CharSequence _generateStringPrimitiveObject = this.generateStringPrimitiveObject(((PrimitiveObject)extended), _equals);
                      _builder.append(_generateStringPrimitiveObject, "\t\t\t");
                      _builder.newLineIfNotEmpty();
                    } else {
                      Array _array = ((PrimitiveObject)extended).getType().getArray();
                      boolean _tripleNotEquals_1 = (_array != null);
                      if (_tripleNotEquals_1) {
                        _builder.append("\t\t\t");
                        int _size_1 = extensions.size();
                        int _plusPlus_1 = counter++;
                        boolean _equals_1 = (_size_1 == _plusPlus_1);
                        CharSequence _generatePrimitiveArrayObject = this.generatePrimitiveArrayObject(((PrimitiveObject)extended), _equals_1);
                        _builder.append(_generatePrimitiveArrayObject, "\t\t\t");
                        _builder.newLineIfNotEmpty();
                      } else {
                        org.xtext.example.mydsl.jSchema.Number _number = ((PrimitiveObject)extended).getType().getNumber();
                        boolean _tripleNotEquals_2 = (_number != null);
                        if (_tripleNotEquals_2) {
                          _builder.append("\t\t\t");
                          int _size_2 = extensions.size();
                          int _plusPlus_2 = counter++;
                          boolean _equals_2 = (_size_2 == _plusPlus_2);
                          CharSequence _generatePrimitiveNumberObject = this.generatePrimitiveNumberObject(((PrimitiveObject)extended), _equals_2);
                          _builder.append(_generatePrimitiveNumberObject, "\t\t\t");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                } else {
                  if ((extended instanceof MainObject)) {
                    _builder.append("\t\t\t");
                    int _size_3 = extensions.size();
                    int _plusPlus_3 = counter++;
                    boolean _equals_3 = (_size_3 == _plusPlus_3);
                    CharSequence _generateMainObject = this.generateMainObject(model, _equals_3);
                    _builder.append(_generateMainObject, "\t\t\t");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
      }
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("]");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence generatePrimitiveArrayObject(final PrimitiveObject primitiveObject, final boolean isLast) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generatePrimitiveNumberObject(final PrimitiveObject primitiveObject, final boolean isLast) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t\t\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateStringPrimitiveObject(final PrimitiveObject mod, final boolean isLast) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"$id\": \"");
    String _name = mod.getType().getName();
    _builder.append(_name);
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("\"type\": \"string\"");
    _builder.newLine();
    {
      boolean _isEmpty = mod.getPrimitiveProperties().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append("\t");
        _builder.append("{");
        _builder.newLine();
        {
          EList<PrimitiveProperties> _primitiveProperties = mod.getPrimitiveProperties();
          for(final PrimitiveProperties prop : _primitiveProperties) {
            {
              FormatTypes _stringFormat = prop.getStringFormat();
              boolean _tripleNotEquals = (_stringFormat != FormatTypes.DEFAULT);
              if (_tripleNotEquals) {
                _builder.append("\t");
                _builder.append(",");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\"format\": \"");
                String _string = prop.getStringFormat().getName().toString();
                _builder.append(_string, "\t");
                _builder.append("\"");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              String _stringLength = prop.getStringLength();
              boolean _tripleNotEquals_1 = (_stringLength != null);
              if (_tripleNotEquals_1) {
                _builder.append("\t");
                _builder.append(",");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\"minLength\": ");
                String _get = prop.getStringLength().split("-")[0];
                _builder.append(_get, "\t");
                _builder.append(",");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\"maxLength\": ");
                String _get_1 = prop.getStringLength().split("-")[1];
                _builder.append(_get_1, "\t");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              String _patternString = prop.getPatternString();
              boolean _tripleNotEquals_2 = (_patternString != null);
              if (_tripleNotEquals_2) {
                _builder.append("\t");
                _builder.append(",");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\"pattern\": \"");
                String _patternString_1 = prop.getPatternString();
                _builder.append(_patternString_1, "\t");
                _builder.append("\"");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      } else {
        if (((!mod.getPrimitiveProperties().isEmpty()) && (!isLast))) {
          _builder.append("\t");
          _builder.append(",");
          _builder.newLine();
        }
      }
    }
    {
      if ((!isLast)) {
        _builder.append("},");
        _builder.newLine();
      } else {
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence generateMainObject(final MainObject mod, final boolean isLast) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isEmpty = mod.getName().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.newLineIfNotEmpty();
        _builder.append("\"$id\": \"");
        String _name = mod.getName();
        _builder.append(_name);
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("\"type\": \"object\",");
        _builder.newLine();
      }
    }
    {
      boolean _isEmpty_1 = mod.getProperties().isEmpty();
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        _builder.append("\t\t\t");
        _builder.append("\"properties\": {");
        _builder.newLine();
        {
          EList<AbstractObject> _properties = mod.getProperties();
          for(final AbstractObject prop : _properties) {
            {
              if ((prop instanceof MainObject)) {
                _builder.append("\t\t\t");
                _builder.append("\"$id\": \"");
                String _name_1 = mod.getName();
                _builder.append(_name_1, "\t\t\t");
                _builder.append("\",");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t");
                _builder.append("\"type\"\": \"object\"");
                _builder.newLine();
              }
            }
            {
              if ((prop instanceof PrimitiveObject)) {
                {
                  String _name_2 = ((PrimitiveObject)prop).getType().getName();
                  boolean _tripleNotEquals = (_name_2 != null);
                  if (_tripleNotEquals) {
                    _builder.append("\t\t\t");
                    String _generatePrimitiveStringObject = this.generatePrimitiveStringObject(((PrimitiveObject)prop), mod.getName());
                    _builder.append(_generatePrimitiveStringObject, "\t\t\t");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  Array _array = ((PrimitiveObject)prop).getType().getArray();
                  boolean _tripleNotEquals_1 = (_array != null);
                  if (_tripleNotEquals_1) {
                    _builder.append("\t\t\t");
                    CharSequence _generatePrimitiveArrayObject = this.generatePrimitiveArrayObject(((PrimitiveObject)prop), isLast);
                    _builder.append(_generatePrimitiveArrayObject, "\t\t\t");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  org.xtext.example.mydsl.jSchema.Number _number = ((PrimitiveObject)prop).getType().getNumber();
                  boolean _tripleNotEquals_2 = (_number != null);
                  if (_tripleNotEquals_2) {
                    _builder.append("\t\t\t");
                    CharSequence _generatePrimitiveNumberObject = this.generatePrimitiveNumberObject(((PrimitiveObject)prop), isLast);
                    _builder.append(_generatePrimitiveNumberObject, "\t\t\t");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
        _builder.append("\t\t\t");
        _builder.append("},");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\"allOf\": {");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.newLine();
      }
    }
    {
      if ((!isLast)) {
        _builder.append("\t\t\t");
        _builder.append("},");
        _builder.newLine();
      } else {
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence generatePrimitiveObject(final PrimitiveObject mod, final boolean isLast) {
    StringConcatenation _builder = new StringConcatenation();
    {
      int _length = mod.getType().getName().length();
      boolean _greaterThan = (_length > 0);
      if (_greaterThan) {
        CharSequence _generateStringPrimitiveObject = this.generateStringPrimitiveObject(mod, isLast);
        _builder.append(_generateStringPrimitiveObject);
        _builder.newLineIfNotEmpty();
      } else {
        int _length_1 = mod.getType().getArray().getName().length();
        boolean _greaterThan_1 = (_length_1 > 0);
        if (_greaterThan_1) {
          CharSequence _generatePrimitiveArrayObject = this.generatePrimitiveArrayObject(mod, isLast);
          _builder.append(_generatePrimitiveArrayObject);
          _builder.newLineIfNotEmpty();
        } else {
          if (((mod.getType().getNumber().getNumber() != 0) || (mod.getType().getNumber().getDecimal() != 0))) {
            CharSequence _generatePrimitiveNumberObject = this.generatePrimitiveNumberObject(mod, isLast);
            _builder.append(_generatePrimitiveNumberObject);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
}
