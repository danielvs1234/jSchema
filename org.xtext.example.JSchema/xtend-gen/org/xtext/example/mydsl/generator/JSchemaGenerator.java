/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterators;
import java.util.ArrayList;
import javax.inject.Inject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl.generator.FileController;
import org.xtext.example.mydsl.generator.JsonFormatter;
import org.xtext.example.mydsl.generator.ObjectClass;
import org.xtext.example.mydsl.generator.PrimitiveObjectClass;
import org.xtext.example.mydsl.jSchema.MainObject;
import org.xtext.example.mydsl.jSchema.Model;
import org.xtext.example.mydsl.jSchema.PrimitiveObject;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class JSchemaGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  private ArrayList<PrimitiveObject> primitiveObjectList;
  
  private ArrayList<MainObject> mainObjectList;
  
  private ArrayList<ObjectClass> compiledMainObjects;
  
  private ArrayList<PrimitiveObjectClass> compiledPrimitiveObjects;
  
  private FileController fileController;
  
  private JsonFormatter jsonFormatter;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    ArrayList<PrimitiveObject> _arrayList = new ArrayList<PrimitiveObject>();
    this.primitiveObjectList = _arrayList;
    ArrayList<MainObject> _arrayList_1 = new ArrayList<MainObject>();
    this.mainObjectList = _arrayList_1;
    ArrayList<PrimitiveObjectClass> _arrayList_2 = new ArrayList<PrimitiveObjectClass>();
    this.compiledPrimitiveObjects = _arrayList_2;
    ArrayList<ObjectClass> _arrayList_3 = new ArrayList<ObjectClass>();
    this.compiledMainObjects = _arrayList_3;
    final Model abstractObjects = Iterators.<Model>filter(resource.getAllContents(), Model.class).next();
    JsonFormatter _jsonFormatter = new JsonFormatter();
    this.jsonFormatter = _jsonFormatter;
    int _size = this.primitiveObjectList.size();
    String _plus = ("Amount of primitive objects found: " + Integer.valueOf(_size));
    System.out.println(_plus);
  }
}
