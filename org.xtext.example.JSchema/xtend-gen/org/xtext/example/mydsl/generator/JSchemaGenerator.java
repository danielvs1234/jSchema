/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.common.collect.Iterators;
import java.util.ArrayList;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.generator.ObjectClass;
import org.xtext.example.mydsl.generator.PrimitiveObjectClass;
import org.xtext.example.mydsl.generator.PrimitiveType;
import org.xtext.example.mydsl.jSchema.Array;
import org.xtext.example.mydsl.jSchema.IsRoot;
import org.xtext.example.mydsl.jSchema.MainObject;
import org.xtext.example.mydsl.jSchema.Model;
import org.xtext.example.mydsl.jSchema.PrimitiveObject;
import org.xtext.example.mydsl.jSchema.hasProperties;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class JSchemaGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  private ArrayList<PrimitiveObject> primitiveObjectList;
  
  private ArrayList<MainObject> mainObjectList;
  
  private ArrayList<ObjectClass> compiledMainObjects;
  
  private ArrayList<PrimitiveObjectClass> compiledPrimitiveObjects;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    ArrayList<PrimitiveObject> _arrayList = new ArrayList<PrimitiveObject>();
    this.primitiveObjectList = _arrayList;
    ArrayList<MainObject> _arrayList_1 = new ArrayList<MainObject>();
    this.mainObjectList = _arrayList_1;
    ArrayList<PrimitiveObjectClass> _arrayList_2 = new ArrayList<PrimitiveObjectClass>();
    this.compiledPrimitiveObjects = _arrayList_2;
    ArrayList<ObjectClass> _arrayList_3 = new ArrayList<ObjectClass>();
    this.compiledMainObjects = _arrayList_3;
    final Model abstractObjects = Iterators.<Model>filter(resource.getAllContents(), Model.class).next();
    int _size = this.primitiveObjectList.size();
    String _plus = ("Amount of primitive objects found: " + Integer.valueOf(_size));
    System.out.println(_plus);
    Iterable<PrimitiveObject> _filter = Iterables.<PrimitiveObject>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), PrimitiveObject.class);
    for (final PrimitiveObject primObj : _filter) {
      this.compilePrimitiveObject(primObj);
    }
    Iterable<MainObject> _filter_1 = Iterables.<MainObject>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), MainObject.class);
    for (final MainObject obj : _filter_1) {
      {
        String bool = "false";
        String rootBool = "false";
        boolean _checkIfObjectContainsOtherObjects = this.checkIfObjectContainsOtherObjects(obj);
        boolean _equals = (_checkIfObjectContainsOtherObjects == true);
        if (_equals) {
          bool = "true";
        }
        IsRoot _root = obj.getRoot();
        boolean _notEquals = (!Objects.equal(_root, null));
        if (_notEquals) {
          rootBool = "true";
        }
        String _string = obj.getObjectName().toString();
        String _plus_1 = ((("Contains other objects: " + bool) + "  ") + _string);
        String _plus_2 = (_plus_1 + " PropertyListSize= ");
        int _size_1 = this.getProperties(obj).size();
        String _plus_3 = (_plus_2 + Integer.valueOf(_size_1));
        String _plus_4 = (_plus_3 + " isRoot: ");
        String _plus_5 = (_plus_4 + rootBool);
        System.out.println(_plus_5);
        this.compiledMainObjects.add(this.compileMainObject(obj));
      }
    }
  }
  
  public ObjectClass compileMainObject(final MainObject obj) {
    throw new Error("Unresolved compilation problems:"
      + "\nType mismatch: cannot convert from PrimitiveObject to PrimitiveObjectClass");
  }
  
  public boolean compilePrimitiveObject(final PrimitiveObject obj) {
    boolean _xblockexpression = false;
    {
      PrimitiveObjectClass temp = null;
      String _string = obj.getType().getString();
      boolean _tripleNotEquals = (_string != null);
      if (_tripleNotEquals) {
        String _string_1 = obj.getType().getString();
        String _string_2 = obj.getType().getString();
        PrimitiveObjectClass _primitiveObjectClass = new PrimitiveObjectClass(_string_1, obj, PrimitiveType.STRING, _string_2);
        temp = _primitiveObjectClass;
      } else {
        Array _array = obj.getType().getArray();
        boolean _tripleNotEquals_1 = (_array != null);
        if (_tripleNotEquals_1) {
          String _arrayName = obj.getType().getArray().getArrayName();
          PrimitiveObjectClass _primitiveObjectClass_1 = new PrimitiveObjectClass(_arrayName, obj, PrimitiveType.ARRAY);
          temp = _primitiveObjectClass_1;
        } else {
          org.xtext.example.mydsl.jSchema.Number _number = obj.getType().getNumber();
          boolean _tripleNotEquals_2 = (_number != null);
          if (_tripleNotEquals_2) {
            String _string_3 = obj.getType().getNumber().toString();
            PrimitiveObjectClass _primitiveObjectClass_2 = new PrimitiveObjectClass("number", obj, PrimitiveType.NUMBER, _string_3);
            temp = _primitiveObjectClass_2;
          }
        }
      }
      _xblockexpression = this.primitiveObjectList.add(obj);
    }
    return _xblockexpression;
  }
  
  public boolean checkIfObjectContainsOtherObjects(final MainObject obj) {
    if (((obj.getIncludeObjects() != null) || (obj.getProperties() != null))) {
      return true;
    } else {
      return false;
    }
  }
  
  public ArrayList<hasProperties> getProperties(final MainObject obj) {
    final ArrayList<hasProperties> propertyList = new ArrayList<hasProperties>();
    EList<hasProperties> _properties = obj.getProperties();
    for (final hasProperties e : _properties) {
      propertyList.add(e);
    }
    return propertyList;
  }
  
  public Object stringBuilder(final String string) {
    return null;
  }
}
