/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl.jSchema.AbstractObject;
import org.xtext.example.mydsl.jSchema.Array;
import org.xtext.example.mydsl.jSchema.Extends;
import org.xtext.example.mydsl.jSchema.FormatTypes;
import org.xtext.example.mydsl.jSchema.Includes;
import org.xtext.example.mydsl.jSchema.MainObject;
import org.xtext.example.mydsl.jSchema.Model;
import org.xtext.example.mydsl.jSchema.PrimitiveObject;
import org.xtext.example.mydsl.jSchema.PrimitiveProperties;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class JSchemaGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Model model = Iterators.<Model>filter(resource.getAllContents(), Model.class).next();
    this.constructSchema(model, fsa);
  }
  
  public void constructSchema(final Model rootModel, final IFileSystemAccess2 fsa) {
    int counter = 0;
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    {
      EList<AbstractObject> _abstractObject = rootModel.getAbstractObject();
      for(final AbstractObject mod : _abstractObject) {
        {
          MainObject _mainObject = mod.getMainObject();
          boolean _tripleNotEquals = (_mainObject != null);
          if (_tripleNotEquals) {
            CharSequence _generateMainObject = this.generateMainObject(mod.getMainObject());
            _builder.append(_generateMainObject);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          PrimitiveObject _primitiveObject = mod.getPrimitiveObject();
          boolean _notEquals = (!Objects.equal(_primitiveObject, null));
          if (_notEquals) {
            CharSequence _generatePrimitiveObject = this.generatePrimitiveObject(mod.getPrimitiveObject());
            _builder.append(_generatePrimitiveObject);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    fsa.generateFile("newGenFile.json", _builder);
  }
  
  public String generatePrimitiveStringObjectss(final PrimitiveObject primitiveObject, final String objName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"");
    _builder.append(objName);
    _builder.append("\" : ");
    _builder.newLineIfNotEmpty();
    _builder.append("\"type\": \"string\"");
    _builder.newLine();
    _builder.newLine();
    {
      EList<PrimitiveProperties> _primitiveProperties = primitiveObject.getPrimitiveProperties();
      for(final PrimitiveProperties prop : _primitiveProperties) {
        {
          FormatTypes _stringFormat = prop.getStringFormat();
          boolean _tripleNotEquals = (_stringFormat != FormatTypes.DEFAULT);
          if (_tripleNotEquals) {
            _builder.append(",");
            _builder.newLine();
            _builder.append("\"format\": \"");
            String _string = prop.getStringFormat().getName().toString();
            _builder.append(_string);
            _builder.append("\"");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _stringLength = prop.getStringLength();
          boolean _tripleNotEquals_1 = (_stringLength != null);
          if (_tripleNotEquals_1) {
            _builder.append(",");
            _builder.newLine();
            _builder.append("\"minLength\": ");
            String _get = prop.getStringLength().split("-")[0];
            _builder.append(_get);
            _builder.append(",");
            _builder.newLineIfNotEmpty();
            _builder.append("\"maxLength\": ");
            String _get_1 = prop.getStringLength().split("-")[1];
            _builder.append(_get_1);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _patternString = prop.getPatternString();
          boolean _tripleNotEquals_2 = (_patternString != null);
          if (_tripleNotEquals_2) {
            _builder.append(",");
            _builder.newLine();
            _builder.append("\"pattern\": \"");
            String _patternString_1 = prop.getPatternString();
            _builder.append(_patternString_1);
            _builder.append("\"");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public CharSequence generateExtendsObjects(final MainObject model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"allOf\": [");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    {
      if (((model.getInherits() instanceof Extends) && (!((Extends) model.getInherits()).getExtensionMainObject().isEmpty()))) {
        {
          EObject _inherits = model.getInherits();
          EList<MainObject> _extensionMainObject = ((Extends) _inherits).getExtensionMainObject();
          for(final MainObject extended : _extensionMainObject) {
            _builder.append("\t");
            Object _generateMainObject = this.generateMainObject(extended);
            _builder.append(_generateMainObject, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EObject _inherits_1 = model.getInherits();
          EList<PrimitiveObject> _extensionPrimitiveObject = ((Extends) _inherits_1).getExtensionPrimitiveObject();
          for(final PrimitiveObject extended_1 : _extensionPrimitiveObject) {
            _builder.append("\t");
            CharSequence _generatePrimitiveObject = this.generatePrimitiveObject(extended_1);
            _builder.append(_generatePrimitiveObject, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      if (((model.getInherits() instanceof Includes) && (!((Includes) model.getInherits()).getIncludesMainObject().isEmpty()))) {
        {
          EObject _inherits_2 = model.getInherits();
          EList<MainObject> _includesMainObject = ((Includes) _inherits_2).getIncludesMainObject();
          for(final MainObject included : _includesMainObject) {
            _builder.append("\t");
            Object _generateMainObject_1 = this.generateMainObject(included);
            _builder.append(_generateMainObject_1, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EObject _inherits_3 = model.getInherits();
          EList<PrimitiveObject> _includesPrimitiveObject = ((Includes) _inherits_3).getIncludesPrimitiveObject();
          for(final PrimitiveObject included_1 : _includesPrimitiveObject) {
            _builder.append("\t");
            CharSequence _generatePrimitiveObject_1 = this.generatePrimitiveObject(included_1);
            _builder.append(_generatePrimitiveObject_1, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("],");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generatePrimitiveArrayObject(final PrimitiveObject primitiveObject) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"type\": \"array\",");
    _builder.newLine();
    {
      String _arrayType = primitiveObject.getType().getArray().getArrayType();
      boolean _tripleNotEquals = (_arrayType != null);
      if (_tripleNotEquals) {
        _builder.append("\"items\": {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\"type\" : ");
        String _arrayType_1 = primitiveObject.getType().getArray().getArrayType();
        _builder.append(_arrayType_1, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence generatePrimitiveNumberObject(final PrimitiveObject primitiveObject) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(",\"type\" : \"number\"");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generatePropertyString(final PrimitiveObject mod) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"");
    String _name = mod.getType().getName();
    _builder.append(_name);
    _builder.append("\": {");
    _builder.newLineIfNotEmpty();
    _builder.append("\"type\": \"string\"");
    _builder.newLine();
    {
      boolean _isEmpty = mod.getPrimitiveProperties().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        {
          EList<PrimitiveProperties> _primitiveProperties = mod.getPrimitiveProperties();
          for(final PrimitiveProperties prop : _primitiveProperties) {
            {
              FormatTypes _stringFormat = prop.getStringFormat();
              boolean _tripleNotEquals = (_stringFormat != FormatTypes.DEFAULT);
              if (_tripleNotEquals) {
                _builder.append(",");
                _builder.newLine();
                _builder.append("\"format\": \"");
                String _string = prop.getStringFormat().getName().toString();
                _builder.append(_string);
                _builder.append("\"");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              String _stringLength = prop.getStringLength();
              boolean _tripleNotEquals_1 = (_stringLength != null);
              if (_tripleNotEquals_1) {
                _builder.append(",");
                _builder.newLine();
                _builder.append("\"minLength\": ");
                String _get = prop.getStringLength().split("-")[0];
                _builder.append(_get);
                _builder.append(",");
                _builder.newLineIfNotEmpty();
                _builder.append("\"maxLength\": ");
                String _get_1 = prop.getStringLength().split("-")[1];
                _builder.append(_get_1);
                _builder.newLineIfNotEmpty();
              }
            }
            {
              String _patternString = prop.getPatternString();
              boolean _tripleNotEquals_2 = (_patternString != null);
              if (_tripleNotEquals_2) {
                _builder.append(",");
                _builder.newLine();
                _builder.append("\"pattern\": \"");
                String _patternString_1 = prop.getPatternString();
                _builder.append(_patternString_1);
                _builder.append("\"");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("},");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateStringPrimitiveObject(final PrimitiveObject mod) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"$id\": \"");
    String _name = mod.getType().getName();
    _builder.append(_name);
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("\"type\": \"string\"");
    _builder.newLine();
    {
      boolean _isEmpty = mod.getPrimitiveProperties().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        {
          EList<PrimitiveProperties> _primitiveProperties = mod.getPrimitiveProperties();
          for(final PrimitiveProperties prop : _primitiveProperties) {
            {
              FormatTypes _stringFormat = prop.getStringFormat();
              boolean _tripleNotEquals = (_stringFormat != FormatTypes.DEFAULT);
              if (_tripleNotEquals) {
                _builder.append(",");
                _builder.newLine();
                _builder.append("\"format\": \"");
                String _string = prop.getStringFormat().getName().toString();
                _builder.append(_string);
                _builder.append("\"");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              String _stringLength = prop.getStringLength();
              boolean _tripleNotEquals_1 = (_stringLength != null);
              if (_tripleNotEquals_1) {
                _builder.append(",");
                _builder.newLine();
                _builder.append("\"minLength\": ");
                String _get = prop.getStringLength().split("-")[0];
                _builder.append(_get);
                _builder.append(",");
                _builder.newLineIfNotEmpty();
                _builder.append("\"maxLength\": ");
                String _get_1 = prop.getStringLength().split("-")[1];
                _builder.append(_get_1);
                _builder.newLineIfNotEmpty();
              }
            }
            {
              String _patternString = prop.getPatternString();
              boolean _tripleNotEquals_2 = (_patternString != null);
              if (_tripleNotEquals_2) {
                _builder.append(",");
                _builder.newLine();
                _builder.append("\"pattern\": \"");
                String _patternString_1 = prop.getPatternString();
                _builder.append(_patternString_1);
                _builder.append("\"");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append(",");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateMainObject(final MainObject mod) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isEmpty = mod.getName().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append("\"$id\": \"");
        String _name = mod.getName();
        _builder.append(_name);
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("\"type\": \"object\",");
        _builder.newLine();
      }
    }
    {
      boolean _isEmpty_1 = mod.getProperties().isEmpty();
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        _builder.append("\t");
        _builder.append("\"properties\": {");
        _builder.newLine();
        {
          EList<AbstractObject> _properties = mod.getProperties();
          for(final AbstractObject prop : _properties) {
            {
              MainObject _mainObject = prop.getMainObject();
              boolean _tripleNotEquals = (_mainObject != null);
              if (_tripleNotEquals) {
                _builder.append("\t");
                _builder.append("\"$");
                String _name_1 = prop.getMainObject().getName();
                _builder.append(_name_1, "\t");
                _builder.append("\": {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\"type\": \"object\"");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
              } else {
                PrimitiveObject _primitiveObject = prop.getPrimitiveObject();
                boolean _tripleNotEquals_1 = (_primitiveObject != null);
                if (_tripleNotEquals_1) {
                  _builder.append("\t");
                  CharSequence _generatePrimitiveObject = this.generatePrimitiveObject(prop.getPrimitiveObject());
                  _builder.append(_generatePrimitiveObject, "\t");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
        _builder.append("\t");
        _builder.append("},");
        _builder.newLine();
      }
    }
    {
      EObject _inherits = mod.getInherits();
      boolean _tripleNotEquals_2 = (_inherits != null);
      if (_tripleNotEquals_2) {
        CharSequence _generateExtendsObjects = this.generateExtendsObjects(mod);
        _builder.append(_generateExtendsObjects);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence generatePrimitiveObject(final PrimitiveObject mod) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _name = mod.getType().getName();
      boolean _tripleNotEquals = (_name != null);
      if (_tripleNotEquals) {
        CharSequence _generateStringPrimitiveObject = this.generateStringPrimitiveObject(mod);
        _builder.append(_generateStringPrimitiveObject);
        _builder.newLineIfNotEmpty();
      } else {
        Array _array = mod.getType().getArray();
        boolean _tripleNotEquals_1 = (_array != null);
        if (_tripleNotEquals_1) {
          CharSequence _generatePrimitiveArrayObject = this.generatePrimitiveArrayObject(mod);
          _builder.append(_generatePrimitiveArrayObject);
          _builder.newLineIfNotEmpty();
        } else {
          org.xtext.example.mydsl.jSchema.Number _number = mod.getType().getNumber();
          boolean _tripleNotEquals_2 = (_number != null);
          if (_tripleNotEquals_2) {
            CharSequence _generatePrimitiveNumberObject = this.generatePrimitiveNumberObject(mod);
            _builder.append(_generatePrimitiveNumberObject);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
}
