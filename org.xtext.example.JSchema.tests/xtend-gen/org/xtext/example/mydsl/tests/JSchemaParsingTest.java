/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.tests;

import com.fasterxml.jackson.databind.JsonNode;
import com.google.common.base.Objects;
import com.google.inject.Inject;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.security.SecureRandom;
import java.util.function.BiPredicate;
import java.util.function.Consumer;
import javax.net.ssl.HttpsURLConnection;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.generator.InMemoryFileSystemAccess;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.quicktheories.WithQuickTheories;
import org.xtext.example.mydsl.jSchema.Model;
import org.xtext.example.mydsl.tests.JSchemaInjectorProvider;

@ExtendWith(InjectionExtension.class)
@InjectWith(JSchemaInjectorProvider.class)
@SuppressWarnings("all")
public class JSchemaParsingTest implements WithQuickTheories {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Inject
  private IGenerator2 underTest;
  
  private JsonNode output;
  
  private static IGeneratorContext context = new GeneratorContext();
  
  public Model generateSchema() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("testobjectProp {");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("String \"testProp\"");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("String \"testStringProp\" with ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("length 3-5, ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("pattern \"/&\", ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("format uri;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("TestArray2 [String \"name1\", num 4]");
      _builder.newLine();
      _builder.newLine();
      _builder.append("mainTestProp root{");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("Test includes \"testStringProp\", \"testobjectProp\", \"TestArray2\"{");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("TestArray [String \"a\", num 1]");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      return this.parseHelper.parse(_builder);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testModel() {
    try {
      final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
      this.underTest.doGenerate(this.generateSchema().eResource(), fsa, JSchemaParsingTest.context);
      final String postUrl = "https://www.jsonschemavalidator.net/api/jsonschema/validate";
      final byte[] postBody = fsa.getTextFiles().get((IFileSystemAccess.DEFAULT_OUTPUT + "testFile.json")).toString().getBytes();
      final String USER_AGENT = "Mozilla/5.0";
      final URL obj = new URL(postUrl);
      URLConnection _openConnection = obj.openConnection();
      final HttpsURLConnection con = ((HttpsURLConnection) _openConnection);
      con.setRequestMethod("POST");
      con.setDoOutput(true);
      final OutputStream os = con.getOutputStream();
      os.write(postBody);
      os.flush();
      os.close();
      final int response = con.getResponseCode();
      if ((response == HttpsURLConnection.HTTP_OK)) {
        InputStream _inputStream = con.getInputStream();
        InputStreamReader _inputStreamReader = new InputStreamReader(_inputStream);
        final BufferedReader in = new BufferedReader(_inputStreamReader);
        String inputLine = null;
        final StringBuffer responseBuffer = new StringBuffer();
        while ((!Objects.equal((inputLine = in.readLine()), null))) {
          responseBuffer.append(inputLine);
        }
        in.close();
        InputOutput.<String>println(Integer.valueOf(response).toString());
      } else {
        InputOutput.<String>println(("post request failed" + Integer.valueOf(response)));
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void addingTwoPositiveIntegers() {
    final BiPredicate<Integer, Integer> _function = (Integer i, Integer j) -> {
      return (((i).intValue() + (j).intValue()) > 0);
    };
    this.qt().<Integer, Integer>forAll(this.integers().allPositive(), this.integers().allPositive()).check(_function);
  }
  
  @Test
  public void checkStringThings() {
    final Consumer<String> _function = (String a) -> {
      try {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("String \"");
        _builder.append(a);
        _builder.append("\"");
        Assertions.assertTrue(this.parseHelper.parse(_builder).eResource().getErrors().isEmpty());
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    this.qt().<String>forAll(this.strings().basicLatinAlphabet().ofLengthBetween(0, 1000)).checkAssert(_function);
  }
  
  @Test
  public void checkArrayThings() {
    final Consumer<Integer> _function = (Integer i) -> {
      try {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("num ");
        _builder.append(i);
        Assertions.assertTrue(this.parseHelper.parse(_builder).eResource().getErrors().isEmpty());
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    this.qt().<Integer>forAll(this.integers().allPositive()).checkAssert(_function);
  }
  
  public String generateRandomString(final int len) {
    final String possibleChars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    final SecureRandom rnd = new SecureRandom();
    StringBuilder sb = new StringBuilder(len);
    for (int i = 0; (i < len); i++) {
      sb.append(possibleChars.charAt(rnd.nextInt(possibleChars.length())));
    }
    return sb.toString();
  }
}
