/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.tests;

import com.fasterxml.jackson.databind.JsonNode;
import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.IGenerator2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.example.mydsl.jSchema.Model;
import org.xtext.example.mydsl.tests.JSchemaInjectorProvider;

@ExtendWith(InjectionExtension.class)
@InjectWith(JSchemaInjectorProvider.class)
@SuppressWarnings("all")
public class JSchemaParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Inject
  private IGenerator2 underTest;
  
  private JsonNode output;
  
  private static IGeneratorContext context = new GeneratorContext();
  
  public Model generateSchema() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("testobjectProp {");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("String \"testProp\"");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("String \"testStringProp\" with ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("length 3-5, ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("pattern \"/&\", ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("format uri;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("TestArray2 [String \"name1\", num 4]");
      _builder.newLine();
      _builder.newLine();
      _builder.append("mainTestProp root{ ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("Test includes \"testStringProp\", \"testobjectProp\", \"TestArray2\"{");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("TestArray [String \"a\", num 1]");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      return this.parseHelper.parse(_builder);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModel() {
    throw new Error("Unresolved compilation problems:"
      + "\nType mismatch: cannot convert from boolean to ProcessingReport");
  }
}
