/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalJSchemaParser;
import org.xtext.example.mydsl.services.JSchemaGrammarAccess;

public class JSchemaParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(JSchemaGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, JSchemaGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getNumberAccess().getAlternatives(), "rule__Number__Alternatives");
			builder.put(grammarAccess.getObjectRequireMinimumPropertiesAccess().getAlternatives_1(), "rule__ObjectRequireMinimumProperties__Alternatives_1");
			builder.put(grammarAccess.getTypesAccess().getAlternatives(), "rule__Types__Alternatives");
			builder.put(grammarAccess.getNumberAccess().getGroup_0(), "rule__Number__Group_0__0");
			builder.put(grammarAccess.getObjectAccess().getGroup(), "rule__Object__Group__0");
			builder.put(grammarAccess.getObjectRequireMinimumPropertiesAccess().getGroup(), "rule__ObjectRequireMinimumProperties__Group__0");
			builder.put(grammarAccess.getTypesAccess().getGroup_0(), "rule__Types__Group_0__0");
			builder.put(grammarAccess.getTypesAccess().getGroup_1(), "rule__Types__Group_1__0");
			builder.put(grammarAccess.getTypesAccess().getGroup_2(), "rule__Types__Group_2__0");
			builder.put(grammarAccess.getTypesAccess().getGroup_3(), "rule__Types__Group_3__0");
			builder.put(grammarAccess.getTypesAccess().getGroup_4(), "rule__Types__Group_4__0");
			builder.put(grammarAccess.getTypesAccess().getGroup_5(), "rule__Types__Group_5__0");
			builder.put(grammarAccess.getPropertiesAccess().getGroup(), "rule__Properties__Group__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
			builder.put(grammarAccess.getArrayAccess().getGroup(), "rule__Array__Group__0");
			builder.put(grammarAccess.getNumberAccess().getValueAssignment_0_1(), "rule__Number__ValueAssignment_0_1");
			builder.put(grammarAccess.getObjectRequireMinimumPropertiesAccess().getPropertiesAssignment_4(), "rule__ObjectRequireMinimumProperties__PropertiesAssignment_4");
			builder.put(grammarAccess.getPropertiesAccess().getPropertiesAssignment_1(), "rule__Properties__PropertiesAssignment_1");
			builder.put(grammarAccess.getPropertyAccess().getNameAssignment_1(), "rule__Property__NameAssignment_1");
			builder.put(grammarAccess.getPropertyAccess().getTypeAssignment_3(), "rule__Property__TypeAssignment_3");
			builder.put(grammarAccess.getArrayAccess().getArrayAssignment_0(), "rule__Array__ArrayAssignment_0");
			builder.put(grammarAccess.getArrayAccess().getLengthAssignment_1(), "rule__Array__LengthAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private JSchemaGrammarAccess grammarAccess;

	@Override
	protected InternalJSchemaParser createParser() {
		InternalJSchemaParser result = new InternalJSchemaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public JSchemaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(JSchemaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
